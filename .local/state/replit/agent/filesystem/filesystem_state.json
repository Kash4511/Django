{"file_contents":{"Backend/accounts/__init__.py":{"content":"","size_bytes":0},"Backend/accounts/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"Backend/accounts/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'\n","size_bytes":148},"Backend/accounts/migrations/0001_initial.py":{"content":"# Generated by Django 5.0.2 on 2025-09-23 19:38\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('email', models.EmailField(max_length=254, unique=True)),\n                ('name', models.CharField(max_length=255)),\n                ('phone_number', models.CharField(blank=True, max_length=20)),\n                ('is_active', models.BooleanField(default=True)),\n                ('is_staff', models.BooleanField(default=False)),\n                ('is_superuser', models.BooleanField(default=False)),\n                ('date_joined', models.DateTimeField(auto_now_add=True)),\n                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),\n                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),\n            ],\n            options={\n                'verbose_name': 'User',\n                'verbose_name_plural': 'Users',\n            },\n        ),\n    ]\n","size_bytes":1791},"Backend/accounts/migrations/__init__.py":{"content":"","size_bytes":0},"Backend/accounts/models.py":{"content":"from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\n\nclass UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        if not extra_fields.get('username'):\n            raise ValueError('The Username field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n        return self.create_user(email, password, **extra_fields)\n\nclass User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    username = models.CharField(max_length=150, unique=True)\n    name = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20, blank=True)\n    \n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_superuser = models.BooleanField(default=False)\n    \n    date_joined = models.DateTimeField(auto_now_add=True)\n\n    objects = UserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['name', 'username']\n\n    def __str__(self):\n        return str(self.email)\n\n    class Meta:\n        verbose_name = 'User'\n        verbose_name_plural = 'Users'\n","size_bytes":1565},"Backend/accounts/serializers.py":{"content":"from rest_framework import serializers\nfrom django.contrib.auth import authenticate\nfrom .models import User\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, min_length=8)\n    password_confirm = serializers.CharField(write_only=True)\n\n    class Meta:\n        model = User\n        fields = ('email', 'username', 'name', 'phone_number', 'password', 'password_confirm')\n\n    def validate(self, attrs):\n        if attrs['password'] != attrs['password_confirm']:\n            raise serializers.ValidationError(\"Passwords don't match\")\n        \n        # Check if username already exists\n        if User.objects.filter(username=attrs['username']).exists():\n            raise serializers.ValidationError(\"Username already exists\")\n        \n        return attrs\n\n    def create(self, validated_data):\n        validated_data.pop('password_confirm')\n        user = User.objects.create_user(\n            email=validated_data['email'],\n            username=validated_data['username'],\n            password=validated_data['password'],\n            name=validated_data['name'],\n            phone_number=validated_data.get('phone_number', '')\n        )\n        return user\n\nclass UserLoginSerializer(serializers.Serializer):\n    username_or_email = serializers.CharField()\n    password = serializers.CharField()\n\n    def validate(self, attrs):\n        username_or_email = attrs.get('username_or_email')\n        password = attrs.get('password')\n\n        if username_or_email and password:\n            # Try to authenticate with email first\n            user = None\n            if '@' in username_or_email:\n                # Looks like an email\n                user = authenticate(email=username_or_email, password=password)\n            \n            # If email auth failed or it doesn't look like email, try username\n            if not user:\n                try:\n                    user_obj = User.objects.get(username=username_or_email)\n                    user = authenticate(email=user_obj.email, password=password)\n                except User.DoesNotExist:\n                    pass\n            \n            if not user:\n                raise serializers.ValidationError('Invalid credentials')\n            if not user.is_active:\n                raise serializers.ValidationError('User account is disabled')\n            attrs['user'] = user\n        else:\n            raise serializers.ValidationError('Must include username/email and password')\n        return attrs\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'username', 'name', 'phone_number', 'date_joined')\n        read_only_fields = ('id', 'date_joined')","size_bytes":2739},"Backend/accounts/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"Backend/accounts/urls.py":{"content":"from django.urls import path\nfrom .views import UserRegistrationView, UserLoginView, UserProfileView\n\nurlpatterns = [\n    path('register/', UserRegistrationView.as_view(), name='user-register'),\n    path('login/', UserLoginView.as_view(), name='user-login'),\n    path('profile/', UserProfileView.as_view(), name='user-profile'),\n]","size_bytes":330},"Backend/accounts/views.py":{"content":"from rest_framework import status, generics, permissions\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom django.contrib.auth import authenticate\nfrom .models import User\nfrom .serializers import UserRegistrationSerializer, UserLoginSerializer, UserSerializer\n\nclass UserRegistrationView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [permissions.AllowAny]\n\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        \n        refresh = RefreshToken.for_user(user)\n        \n        return Response({\n            'user': UserSerializer(user).data,\n            'refresh': str(refresh),\n            'access': str(refresh.access_token),\n        }, status=status.HTTP_201_CREATED)\n\nclass UserLoginView(APIView):\n    permission_classes = [permissions.AllowAny]\n\n    def post(self, request):\n        serializer = UserLoginSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.validated_data['user']\n        \n        refresh = RefreshToken.for_user(user)\n        \n        return Response({\n            'user': UserSerializer(user).data,\n            'refresh': str(refresh),\n            'access': str(refresh.access_token),\n        })\n\nclass UserProfileView(generics.RetrieveUpdateAPIView):\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get_object(self):\n        return self.request.user\n","size_bytes":1713},"Backend/django_project/__init__.py":{"content":"","size_bytes":0},"Backend/django_project/asgi.py":{"content":"\"\"\"\nASGI config for django_project project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n\napplication = get_asgi_application()\n","size_bytes":405},"Backend/django_project/settings.py":{"content":"\"\"\"\nDjango settings for django_project project.\n\nGenerated by 'django-admin startproject' using Django 5.0.1.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-4ju2n@$f9d0c=h)_g0lbb%k9&@rf(xa$d$g$&5ri$uf)*gev^4'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = os.environ.get(\"REPLIT_DOMAINS\", \"localhost,127.0.0.1\").split(',') + [\n    'localhost', \n    '127.0.0.1',\n    '0.0.0.0',\n    os.environ.get('HOSTNAME', ''),\n    '*.replit.dev',\n    '.replit.dev'\n]\n# Remove empty strings\nALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host]\nCSRF_TRUSTED_ORIGINS = [\n    \"https://\" + domain for domain in os.environ.get(\"REPLIT_DOMAINS\", \"\").split(',')\n] if os.environ.get(\"REPLIT_DOMAINS\") else []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'corsheaders',\n    'accounts',\n    'lead_magnets',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n]\n\n# Only use clickjacking protection in deployments because the Development Web View uses\n# iframes and needs to be a cross origin.\nif (\"REPLIT_DEPLOYMENT\" in os.environ):\n    MIDDLEWARE.append('django.middleware.clickjacking.XFrameOptionsMiddleware')\n\nROOT_URLCONF = 'django_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'django_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Custom User Model\nAUTH_USER_MODEL = 'accounts.User'\n\n# REST Framework Configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n\n# JWT Configuration\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n}\n\n# CORS Configuration\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5000\",\n    \"http://127.0.0.1:5000\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    \"https://0ab169f4-4651-4b7b-b1d4-4fa37876b314-00-3nh6i484buitd.kirk.replit.dev:5000\",\n    \"https://0ab169f4-4651-4b7b-b1d4-4fa37876b314-00-3nh6i484buitd.kirk.replit.dev\",\n]\n\nif os.environ.get(\"REPLIT_DOMAINS\"):\n    CORS_ALLOWED_ORIGINS.extend([\n        f\"https://{domain}\" for domain in os.environ[\"REPLIT_DOMAINS\"].split(',')\n    ])\n\nCORS_ALLOW_CREDENTIALS = True\nCORS_ALLOW_ALL_ORIGINS = False\n","size_bytes":5144},"Backend/django_project/urls.py":{"content":"\"\"\"\nURL configuration for django_project project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('accounts.urls')),\n    path('api/', include('lead_magnets.urls')),\n]\n","size_bytes":876},"Backend/django_project/wsgi.py":{"content":"\"\"\"\nWSGI config for django_project project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n\napplication = get_wsgi_application()\n","size_bytes":405},"Backend/manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":670},"Backend/pyproject.toml":{"content":"[tool.poetry]\nauthors = [\"Your Name <you@example.com>\"]\ndescription = \"\"\nname = \"django-template\"\nversion = \"0.1.0\"\n[tool.poetry.dependencies]\nDjango = \"^5.0\"\npython = \"^3.10\"\n[tool.poetry.dev-dependencies]\n\n[tool.pyright]\n# https://github.com/microsoft/pyright/blob/main/docs/configuration.md\nuseLibraryCodeForTypes = true\nexclude = [\".cache\"]\n\n[tool.ruff]\n# https://beta.ruff.rs/docs/configuration/\nselect = ['E', 'W', 'F', 'I', 'B', 'C4', 'ARG', 'SIM']\nignore = ['W291', 'W292', 'W293']\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"","size_bytes":581},"Frontend/README.md":{"content":"# React + TypeScript + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## React Compiler\n\nThe React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:\n\n```js\nexport default defineConfig([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      // Other configs...\n\n      // Remove tseslint.configs.recommended and replace with this\n      tseslint.configs.recommendedTypeChecked,\n      // Alternatively, use this for stricter rules\n      tseslint.configs.strictTypeChecked,\n      // Optionally, add this for stylistic rules\n      tseslint.configs.stylisticTypeChecked,\n\n      // Other configs...\n    ],\n    languageOptions: {\n      parserOptions: {\n        project: ['./tsconfig.node.json', './tsconfig.app.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n      // other options...\n    },\n  },\n])\n```\n\nYou can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:\n\n```js\n// eslint.config.js\nimport reactX from 'eslint-plugin-react-x'\nimport reactDom from 'eslint-plugin-react-dom'\n\nexport default defineConfig([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      // Other configs...\n      // Enable lint rules for React\n      reactX.configs['recommended-typescript'],\n      // Enable lint rules for React DOM\n      reactDom.configs.recommended,\n    ],\n    languageOptions: {\n      parserOptions: {\n        project: ['./tsconfig.node.json', './tsconfig.app.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n      // other options...\n    },\n  },\n])\n```\n","size_bytes":2466},"Frontend/eslint.config.js":{"content":"import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport tseslint from 'typescript-eslint'\nimport { defineConfig, globalIgnores } from 'eslint/config'\n\nexport default defineConfig([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      js.configs.recommended,\n      tseslint.configs.recommended,\n      reactHooks.configs['recommended-latest'],\n      reactRefresh.configs.vite,\n    ],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n  },\n])\n","size_bytes":621},"Frontend/src/App.css":{"content":"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', \n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  line-height: 1.6;\n  color: #1a1a1a;\n  background: #fafafa;\n}\n\n.App {\n  width: 100%;\n  min-height: 100vh;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1800px;\n  margin: 0 auto;\n  padding: 0 2rem;\n  width: 100%;\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.cta-button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.875rem 2rem;\n  border: none;\n  border-radius: 12px;\n  font-weight: 600;\n  font-size: 1rem;\n  text-decoration: none;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  font-family: inherit;\n  white-space: nowrap;\n}\n\n.cta-button.primary {\n  background: linear-gradient(135deg, #2a5766 0%, #2a5766 100%);\n  color: white;\n  box-shadow: 0 4px 15px rgba(42, 87, 102, 0.4);\n}\n\n.cta-button.primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(42, 87, 102, 0.6);\n}\n\n.cta-button.secondary {\n  background: rgba(255, 255, 255, 0.8);\n  color: #667eea;\n  border: 1px solid rgba(102, 126, 234, 0.3);\n  backdrop-filter: blur(10px);\n}\n\n.cta-button.secondary:hover {\n  background: rgba(255, 255, 255, 0.95);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.cta-button.large {\n  padding: 1.125rem 2.5rem;\n  font-size: 1.125rem;\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 0 1rem;\n  }\n  \n  .cta-button {\n    padding: 0.75rem 1.5rem;\n    font-size: 0.9rem;\n  }\n}\n","size_bytes":1856},"Frontend/src/App.tsx":{"content":"import { Routes, Route } from 'react-router-dom'\nimport { AuthProvider } from './contexts/AuthContext'\nimport LandingPage from './components/LandingPage'\nimport LoginPage from './components/LoginPage'\nimport SignupPage from './components/SignupPage'\nimport Dashboard from './components/Dashboard'\nimport ProtectedRoute from './components/ProtectedRoute'\nimport LeadMagnetGenerator from './components/LeadMagnetGenerator'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AuthProvider>\n        <Routes>\n          <Route path=\"/\" element={<LandingPage />} />\n          <Route path=\"/login\" element={<LoginPage />} />\n          <Route path=\"/signup\" element={<SignupPage />} />\n          <Route \n            path=\"/dashboard\" \n            element={\n              <ProtectedRoute>\n                <Dashboard />\n              </ProtectedRoute>\n            } \n          />\n          <Route \n            path=\"/create-lead-magnet\" \n            element={\n              <ProtectedRoute>\n                <LeadMagnetGenerator />\n              </ProtectedRoute>\n            } \n          />\n        </Routes>\n      </AuthProvider>\n    </div>\n  )\n}\n\nexport default App\n","size_bytes":1186},"Frontend/src/components/AuthPages.css":{"content":".back-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  text-decoration: none;\n  color: #9ca3af;\n  font-size: 0.875rem;\n  margin-bottom: 2rem;\n  transition: color 0.3s ease;\n}\n\n.back-button:hover {\n  color: #4a8299;\n}\n\n.auth-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: #0a0a0a;\n  backdrop-filter: blur(8px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 1rem;\n}\n\n.auth-container {\n  background: #1a1a1a;\n  border-radius: 20px;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);\n  border: 1px solid #333;\n  width: 100%;\n  max-width: 450px;\n  max-height: 90vh;\n  overflow-y: auto;\n  position: relative;\n}\n\n.auth-header {\n  padding: 2rem 2rem 1rem;\n  text-align: center;\n  position: relative;\n  background: linear-gradient(135deg, #2a2a2a 0%, #1f1f1f 100%);\n  border-radius: 20px 20px 0 0;\n}\n\n.auth-header h2 {\n  font-size: 1.75rem;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n  color: #ffffff;\n}\n\n.auth-header p {\n  color: #cccccc;\n  font-size: 1rem;\n  margin-bottom: 0;\n}\n\n.auth-close {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  color: #cccccc;\n  cursor: pointer;\n  width: 32px;\n  height: 32px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.auth-close:hover {\n  background: rgba(255, 255, 255, 0.1);\n  color: #ffffff;\n}\n\n.auth-form {\n  padding: 1.5rem 2rem 2rem;\n}\n\n.auth-field {\n  margin-bottom: 1.5rem;\n}\n\n.auth-field label {\n  display: block;\n  font-weight: 600;\n  color: #ffffff;\n  margin-bottom: 0.5rem;\n  font-size: 0.9rem;\n}\n\n.input-wrapper {\n  position: relative;\n}\n\n.input-wrapper input {\n  width: 100%;\n  padding: 0.875rem 1rem 0.875rem 3rem;\n  border: 1.5px solid #444;\n  border-radius: 12px;\n  font-size: 1rem;\n  font-family: inherit;\n  transition: all 0.2s ease;\n  background: #2a2a2a;\n  color: #ffffff;\n}\n\n.input-wrapper input::placeholder {\n  color: #999999;\n}\n\n.input-wrapper input:focus {\n  outline: none;\n  border-color: #4a8299;\n  background: #333333;\n  box-shadow: 0 0 0 3px rgba(74, 130, 153, 0.2);\n}\n\n.input-icon {\n  position: absolute;\n  left: 0.875rem;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #4a8299;\n  pointer-events: none;\n}\n\n.password-toggle {\n  position: absolute;\n  right: 0.875rem;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #cccccc;\n  cursor: pointer;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: color 0.2s ease;\n}\n\n.password-toggle:hover {\n  color: #4a8299;\n}\n\n.auth-error {\n  background: #2a1a1a;\n  color: #ff6b6b;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  border: 1px solid #444;\n}\n\n.auth-success {\n  background: #1a2a1a;\n  color: #22c55e;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  border: 1px solid #22c55e;\n}\n\n.auth-submit {\n  width: 100%;\n  background: linear-gradient(135deg, #4a8299 0%, #3a6b7d 100%);\n  color: white;\n  border: none;\n  padding: 0.875rem 1rem;\n  border-radius: 12px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  margin-bottom: 1rem;\n}\n\n.auth-submit:hover:not(:disabled) {\n  transform: translateY(-1px);\n  box-shadow: 0 8px 25px rgba(74, 130, 153, 0.4);\n}\n\n.auth-submit:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.auth-switch {\n  padding: 1rem 2rem 2rem;\n  text-align: center;\n  border-top: 1px solid #444;\n}\n\n.auth-switch p {\n  color: #cccccc;\n  font-size: 0.9rem;\n}\n\n.auth-switch-btn {\n  background: none;\n  border: none;\n  color: #4a8299;\n  font-weight: 600;\n  cursor: pointer;\n  margin-left: 0.5rem;\n  transition: color 0.2s ease;\n  font-size: 0.9rem;\n}\n\n.auth-switch-btn:hover {\n  color: #5a9bb5;\n}\n\n@media (max-width: 480px) {\n  .auth-container {\n    margin: 0;\n    border-radius: 0;\n    height: 100vh;\n    max-height: none;\n  }\n  \n  .auth-header {\n    border-radius: 0;\n    padding: 1.5rem 1.5rem 1rem;\n  }\n  \n  .auth-form {\n    padding: 1rem 1.5rem 1.5rem;\n  }\n  \n  .auth-switch {\n    padding: 1rem 1.5rem 1.5rem;\n  }\n}","size_bytes":4218},"Frontend/src/components/AuthPages.tsx":{"content":"import React, { useState } from 'react'\nimport { motion } from 'framer-motion'\nimport { Eye, EyeOff, User, Mail, Phone, Lock } from 'lucide-react'\nimport axios from 'axios'\nimport './AuthPages.css'\n\ninterface AuthPagesProps {\n  onLogin: (userData: any) => void\n  onClose: () => void\n  initialMode?: 'login' | 'signup'\n}\n\nconst AuthPages: React.FC<AuthPagesProps> = ({ onLogin, onClose, initialMode = 'login' }) => {\n  const [isLogin, setIsLogin] = useState(initialMode === 'login')\n  const [showPassword, setShowPassword] = useState(false)\n  const [formData, setFormData] = useState({\n    email: '',\n    name: '',\n    phone_number: '',\n    password: '',\n    password_confirm: ''\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    })\n    setError('')\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    // Client-side validation for signup\n    if (!isLogin) {\n      if (formData.password !== formData.password_confirm) {\n        setError('Passwords do not match.')\n        setLoading(false)\n        return\n      }\n      if (!formData.name.trim()) {\n        setError('Full name is required.')\n        setLoading(false)\n        return\n      }\n      if (!formData.password_confirm.trim()) {\n        setError('Please confirm your password.')\n        setLoading(false)\n        return\n      }\n    }\n\n    try {\n      const endpoint = isLogin ? '/api/auth/login/' : '/api/auth/register/'\n      const payload = isLogin \n        ? { email: formData.email, password: formData.password }\n        : formData\n\n      // Construct API base URL - use current origin in Replit environment\n      let apiBase = import.meta.env.VITE_API_BASE_URL\n      \n      if (!apiBase) {\n        if (window.location.hostname.includes('replit.dev')) {\n          // In Replit environment, use the same domain but port 8000\n          apiBase = `${window.location.protocol}//${window.location.hostname}:8000`\n        } else {\n          // Local development\n          apiBase = `${window.location.protocol}//${window.location.hostname}:8000`\n        }\n      }\n      \n      console.log('Making API request to:', `${apiBase}${endpoint}`)\n      console.log('Payload:', payload)\n      \n      const response = await axios.post(`${apiBase}${endpoint}`, payload, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        timeout: 10000, // 10 second timeout\n      })\n\n      const data = response.data\n      console.log('API Response:', data)\n\n      if (data.access && data.refresh) {\n        localStorage.setItem('access_token', data.access)\n        localStorage.setItem('refresh_token', data.refresh)\n        \n        // Fetch user profile after successful authentication\n        try {\n          const profileResponse = await axios.get(`${apiBase}/api/auth/profile/`, {\n            headers: {\n              'Authorization': `Bearer ${data.access}`,\n              'Content-Type': 'application/json'\n            },\n            timeout: 5000\n          })\n          onLogin(profileResponse.data)\n        } catch (profileErr) {\n          // Fallback to user data from response or minimal user object\n          onLogin(data.user || { name: 'User', email: formData.email })\n        }\n      } else {\n        setError('Invalid response from server. Please try again.')\n      }\n    } catch (err: any) {\n      console.error('API error:', err)\n      \n      if (err.response?.data) {\n        // Handle backend validation errors\n        const errorData = err.response.data\n        if (errorData.email && Array.isArray(errorData.email)) {\n          setError(errorData.email[0])\n        } else if (errorData.password && Array.isArray(errorData.password)) {\n          setError(errorData.password[0])\n        } else if (errorData.non_field_errors && Array.isArray(errorData.non_field_errors)) {\n          setError(errorData.non_field_errors[0])\n        } else if (errorData.detail) {\n          setError(errorData.detail)\n        } else {\n          setError('Authentication failed. Please check your information.')\n        }\n      } else if (err.code === 'ECONNABORTED' || err.message.includes('timeout')) {\n        setError('Request timed out. Please try again.')\n      } else if (err.request) {\n        setError('Unable to connect to server. Please check your connection and try again.')\n      } else {\n        setError('An unexpected error occurred. Please try again.')\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"auth-overlay\" onClick={onClose}>\n      <motion.div\n        className=\"auth-modal\"\n        initial={{ opacity: 0, scale: 0.9, y: 20 }}\n        animate={{ opacity: 1, scale: 1, y: 0 }}\n        exit={{ opacity: 0, scale: 0.9, y: 20 }}\n        transition={{ duration: 0.3 }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"auth-header\">\n          <h2>{isLogin ? 'Welcome Back' : 'Create Account'}</h2>\n          <p>{isLogin ? 'Sign in to your account' : 'Join us to create amazing PDFs'}</p>\n          <button className=\"auth-close\" onClick={onClose}>×</button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"auth-form\">\n          {error && (\n            <motion.div\n              className=\"auth-error\"\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n            >\n              {error}\n            </motion.div>\n          )}\n\n          <div className=\"auth-field\">\n            <label htmlFor=\"email\">Email</label>\n            <div className=\"input-wrapper\">\n              <Mail className=\"input-icon\" size={20} />\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"Enter your email\"\n                required\n              />\n            </div>\n          </div>\n\n          {!isLogin && (\n            <>\n              <div className=\"auth-field\">\n                <label htmlFor=\"name\">Full Name</label>\n                <div className=\"input-wrapper\">\n                  <User className=\"input-icon\" size={20} />\n                  <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter your full name\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"auth-field\">\n                <label htmlFor=\"phone_number\">Phone Number</label>\n                <div className=\"input-wrapper\">\n                  <Phone className=\"input-icon\" size={20} />\n                  <input\n                    type=\"tel\"\n                    id=\"phone_number\"\n                    name=\"phone_number\"\n                    value={formData.phone_number}\n                    onChange={handleInputChange}\n                    placeholder=\"Enter your phone number\"\n                  />\n                </div>\n              </div>\n            </>\n          )}\n\n          <div className=\"auth-field\">\n            <label htmlFor=\"password\">Password</label>\n            <div className=\"input-wrapper\">\n              <Lock className=\"input-icon\" size={20} />\n              <input\n                type={showPassword ? 'text' : 'password'}\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                placeholder=\"Enter your password\"\n                required\n              />\n              <button\n                type=\"button\"\n                className=\"password-toggle\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n              </button>\n            </div>\n          </div>\n\n          {!isLogin && (\n            <div className=\"auth-field\">\n              <label htmlFor=\"password_confirm\">Confirm Password</label>\n              <div className=\"input-wrapper\">\n                <Lock className=\"input-icon\" size={20} />\n                <input\n                  type={showPassword ? 'text' : 'password'}\n                  id=\"password_confirm\"\n                  name=\"password_confirm\"\n                  value={formData.password_confirm}\n                  onChange={handleInputChange}\n                  placeholder=\"Confirm your password\"\n                  required\n                />\n              </div>\n            </div>\n          )}\n\n          <button type=\"submit\" className=\"auth-submit\" disabled={loading}>\n            {loading ? 'Please wait...' : (isLogin ? 'Login' : 'Create Account')}\n          </button>\n        </form>\n\n        <div className=\"auth-switch\">\n          <p>\n            {isLogin ? \"Don't have an account?\" : \"Already have an account?\"}\n            <button\n              type=\"button\"\n              onClick={() => setIsLogin(!isLogin)}\n              className=\"auth-switch-btn\"\n            >\n              {isLogin ? 'Sign Up' : 'Login'}\n            </button>\n          </p>\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default AuthPages","size_bytes":9454},"Frontend/src/components/DemoSection.css":{"content":".demo-section {\n  background: #1a1a1a;\n  position: relative;\n  padding: 8rem 2rem;\n}\n\n.demo-header {\n  text-align: center;\n  max-width: 600px;\n  margin: 0 auto 4rem;\n}\n\n.demo-title {\n  font-size: 2.8rem;\n  font-weight: 400;\n  margin-bottom: 1.5rem;\n  color: #ffffff;\n  text-align: center;\n}\n\n.demo-subtitle {\n  font-size: 1.2rem;\n  color: #cccccc;\n  line-height: 1.6;\n  text-align: center;\n  font-weight: 300;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.demo-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n  gap: 2rem;\n  margin-bottom: 4rem;\n}\n\n.demo-card {\n  background: linear-gradient(145deg, #2a2a2a 0%, #1f1f1f 100%);\n  border-radius: 20px;\n  overflow: hidden;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.demo-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.demo-image {\n  position: relative;\n  height: 200px;\n  overflow: hidden;\n}\n\n.demo-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: transform 0.3s ease;\n}\n\n.demo-card:hover .demo-image img {\n  transform: scale(1.05);\n}\n\n.demo-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.4);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.demo-card:hover .demo-overlay {\n  opacity: 1;\n}\n\n.demo-preview-btn {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  background: #2a5766;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.demo-preview-btn:hover {\n  background: #2a5766;\n  transform: scale(1.05);\n}\n\n.demo-content {\n  padding: 1.5rem;\n}\n\n.demo-card-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: #ffffff;\n}\n\n.demo-description {\n  color: #cccccc;\n  margin-bottom: 1rem;\n  line-height: 1.5;\n}\n\n.demo-stats {\n  display: flex;\n  gap: 1.5rem;\n}\n\n.demo-stat {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  color: #2a5766;\n  font-weight: 500;\n  font-size: 0.9rem;\n}\n\n.demo-stat svg {\n  width: 16px;\n  height: 16px;\n}\n\n.demo-cta {\n  text-align: center;\n  margin-top: 3rem;\n}\n\n@media (max-width: 768px) {\n  .demo-title {\n    font-size: 2rem;\n  }\n  \n  .demo-subtitle {\n    font-size: 1.1rem;\n  }\n  \n  .demo-grid {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n  }\n  \n  .demo-stats {\n    gap: 1rem;\n  }\n}","size_bytes":2602},"Frontend/src/components/DemoSection.tsx":{"content":"import React from 'react'\nimport { motion } from 'framer-motion'\nimport { FileText, Download, Eye } from 'lucide-react'\nimport './DemoSection.css'\n\nconst sampleMagnets = [\n  {\n    title: 'Modern Home Design Trends 2024',\n    description: 'Latest trends in contemporary residential architecture',\n    pages: '12 pages',\n    downloads: '2.3k',\n    image: 'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=300&h=200&fit=crop'\n  },\n  {\n    title: 'Sustainable Architecture Guide',\n    description: 'Eco-friendly design principles and practices',\n    pages: '16 pages', \n    downloads: '1.8k',\n    image: 'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=300&h=200&fit=crop'\n  },\n  {\n    title: 'Small Space, Big Ideas',\n    description: 'Maximizing potential in compact living spaces',\n    pages: '10 pages',\n    downloads: '3.1k', \n    image: 'https://images.unsplash.com/photo-1600566753086-00f18fb6b3ea?w=300&h=200&fit=crop'\n  }\n]\n\nconst DemoSection: React.FC = () => {\n  return (\n    <section className=\"demo-section\">\n      <div className=\"container\">\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8 }}\n          className=\"demo-header\"\n        >\n          <h2 className=\"demo-title\">\n            See what you can create\n          </h2>\n          <p className=\"demo-subtitle\">\n            Sample lead magnets created with our AI-powered generator\n          </p>\n        </motion.div>\n\n        <div className=\"demo-grid\">\n          {sampleMagnets.map((magnet, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, delay: index * 0.1 }}\n              className=\"demo-card\"\n            >\n              <div className=\"demo-image\">\n                <img src={magnet.image} alt={magnet.title} />\n                <div className=\"demo-overlay\">\n                  <button className=\"demo-preview-btn\">\n                    <Eye size={20} />\n                    Preview\n                  </button>\n                </div>\n              </div>\n              <div className=\"demo-content\">\n                <h3 className=\"demo-card-title\">{magnet.title}</h3>\n                <p className=\"demo-description\">{magnet.description}</p>\n                <div className=\"demo-stats\">\n                  <div className=\"demo-stat\">\n                    <FileText size={16} />\n                    <span>{magnet.pages}</span>\n                  </div>\n                  <div className=\"demo-stat\">\n                    <Download size={16} />\n                    <span>{magnet.downloads}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8 }}\n          className=\"demo-cta\"\n        >\n          <button className=\"cta-button primary large\">\n            Create Your First Lead Magnet\n          </button>\n        </motion.div>\n      </div>\n    </section>\n  )\n}\n\nexport default DemoSection","size_bytes":3351},"Frontend/src/components/FeaturesSection.css":{"content":".features-section {\n  padding: 8rem 2rem;\n  background: #1a1a1a;\n}\n\n.container {\n  max-width: 1800px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.features-header {\n  text-align: center;\n  margin-bottom: 6rem;\n}\n\n.features-title {\n  font-size: 2.5rem;\n  font-weight: 300;\n  color: #ffffff;\n  line-height: 1.2;\n  margin-bottom: 0;\n  letter-spacing: -0.02em;\n  max-width: 800px;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 3rem;\n  margin-top: 4rem;\n}\n\n.feature-card {\n  background: #ffffff;\n  border: 1px solid #f0f0f0;\n  padding: 2.5rem 2rem;\n  transition: all 0.3s ease;\n  text-align: center;\n  cursor: pointer;\n}\n\n.feature-card:hover {\n  border-color: #000000;\n  transform: translateY(-2px) scale(1.02);\n}\n\n.feature-icon {\n  width: 48px;\n  height: 48px;\n  color: #5da3c7;\n  margin-bottom: 1.5rem;\n  stroke-width: 1;\n  background: #000000;\n  padding: 12px;\n  border-radius: 12px;\n  display: inline-block;\n}\n\n.feature-title {\n  font-size: 1.25rem;\n  font-weight: 400;\n  color: #000000;\n  margin-bottom: 1rem;\n  line-height: 1.3;\n  letter-spacing: -0.01em;\n}\n\n.feature-description {\n  color: #666666;\n  font-size: 0.95rem;\n  font-weight: 300;\n  line-height: 1.6;\n  margin: 0;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .features-section {\n    padding: 4rem 1.5rem;\n  }\n  \n  .features-title {\n    font-size: 2rem;\n  }\n  \n  .features-grid {\n    grid-template-columns: 1fr;\n    gap: 2rem;\n  }\n  \n  .feature-card {\n    padding: 2rem 1.5rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .features-title {\n    font-size: 1.75rem;\n  }\n  \n  .feature-icon {\n    width: 40px;\n    height: 40px;\n  }\n  \n  .feature-title {\n    font-size: 1.1rem;\n  }\n  \n  .feature-description {\n    font-size: 0.9rem;\n  }\n}","size_bytes":1792},"Frontend/src/components/FeaturesSection.tsx":{"content":"import React from 'react'\nimport { motion } from 'framer-motion'\nimport { Sparkles, Zap, Settings, Target } from 'lucide-react'\nimport './FeaturesSection.css'\n\nconst features = [\n  {\n    icon: <Sparkles className=\"feature-icon\" />,\n    title: 'AI-generated high-quality content',\n    description: 'Our AI creates professional, engaging content tailored specifically for architects and their clients.'\n  },\n  {\n    icon: <Zap className=\"feature-icon\" />,\n    title: 'Visually appealing professional PDFs',\n    description: 'Generate stunning 10-page PDFs with modern layouts, typography, and architectural design elements.'\n  },\n  {\n    icon: <Settings className=\"feature-icon\" />,\n    title: 'Seamless integration with existing systems',\n    description: 'Easy integration with your current workflow, CRM, and marketing automation tools.'\n  },\n  {\n    icon: <Target className=\"feature-icon\" />,\n    title: 'Specific, engaging, and useful content',\n    description: 'Content that resonates with your target audience and drives real engagement and leads.'\n  }\n]\n\nconst FeaturesSection: React.FC = () => {\n  return (\n    <section className=\"features-section\">\n      <div className=\"container\">\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8 }}\n          className=\"features-header\"\n        >\n          <h2 className=\"features-title\">\n            Transform your architectural expertise into compelling marketing assets\n          </h2>\n        </motion.div>\n\n        <div className=\"features-grid\">\n          {features.map((feature, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, delay: index * 0.1 }}\n              className=\"feature-card\"\n            >\n              <div className=\"feature-icon-wrapper\">\n                {feature.icon}\n              </div>\n              <h3 className=\"feature-title\">{feature.title}</h3>\n              <p className=\"feature-description\">{feature.description}</p>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default FeaturesSection","size_bytes":2342},"Frontend/src/components/Footer.css":{"content":".footer {\n  background: #0f0f0f;\n  color: #e5e5e5;\n  padding: 1.5rem 0;\n  border-top: 1px solid #333333;\n}\n\n.footer-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 2rem;\n  margin-bottom: 1rem;\n}\n\n.footer-brand {\n  flex-shrink: 0;\n}\n\n.footer-logo {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 1rem;\n  color: #4a8299;\n}\n\n.footer-tagline {\n  color: #a1a1a1;\n  line-height: 1.6;\n}\n\n.footer-links {\n  display: flex;\n  gap: 3rem;\n  flex-grow: 1;\n  justify-content: center;\n}\n\n.footer-column h4 {\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: white;\n}\n\n.footer-column ul {\n  list-style: none;\n}\n\n.footer-column ul li {\n  margin-bottom: 0.3rem;\n}\n\n.footer-column ul li a {\n  color: #a1a1a1;\n  text-decoration: none;\n  transition: color 0.3s ease;\n  font-size: 0.8rem;\n}\n\n.footer-column ul li a:hover {\n  color: #667eea;\n}\n\n.footer-bottom {\n  padding-top: 1rem;\n  border-top: 1px solid #333;\n  text-align: center;\n  color: #a1a1a1;\n}\n\n@media (max-width: 768px) {\n  .footer-content {\n    flex-direction: column;\n    gap: 1.5rem;\n    align-items: center;\n  }\n  \n  .footer-links {\n    flex-direction: column;\n    gap: 1rem;\n    text-align: center;\n  }\n  \n  .footer-brand {\n    text-align: center;\n  }\n}","size_bytes":1276},"Frontend/src/components/Footer.tsx":{"content":"import React from 'react'\nimport './Footer.css'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <div className=\"footer-content\">\n          <div className=\"footer-brand\">\n            <h3 className=\"footer-logo\">Forma</h3>\n            <p className=\"footer-tagline\">\n              AI-powered lead magnets for architects\n            </p>\n          </div>\n          \n          <div className=\"footer-links\">\n            <div className=\"footer-column\">\n              <h4>Product</h4>\n              <ul>\n                <li><a href=\"#features\">Features</a></li>\n                <li><a href=\"#pricing\">Pricing</a></li>\n                <li><a href=\"#templates\">Templates</a></li>\n                <li><a href=\"#integrations\">Integrations</a></li>\n              </ul>\n            </div>\n            \n            <div className=\"footer-column\">\n              <h4>Company</h4>\n              <ul>\n                <li><a href=\"#about\">About</a></li>\n                <li><a href=\"#contact\">Contact</a></li>\n                <li><a href=\"#careers\">Careers</a></li>\n                <li><a href=\"#blog\">Blog</a></li>\n              </ul>\n            </div>\n            \n            <div className=\"footer-column\">\n              <h4>Legal</h4>\n              <ul>\n                <li><a href=\"#privacy\">Privacy Policy</a></li>\n                <li><a href=\"#terms\">Terms of Service</a></li>\n                <li><a href=\"#cookies\">Cookie Policy</a></li>\n                <li><a href=\"#security\">Security</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"footer-bottom\">\n          <p>&copy; 2024 Forma. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer","size_bytes":1805},"Frontend/src/components/HeroSection.css":{"content":".hero-section {\n  min-height: 100vh;\n  background: #1a1a1a;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  overflow: hidden;\n}\n\n/* Live moving pattern background */\n.hero-section::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 200%;\n  height: 200%;\n  background: \n    linear-gradient(45deg, transparent 40%, rgba(74, 130, 153, 0.03) 50%, transparent 60%),\n    linear-gradient(-45deg, transparent 40%, rgba(74, 130, 153, 0.02) 50%, transparent 60%);\n  background-size: 60px 60px;\n  animation: movePattern 20s linear infinite;\n  z-index: 1;\n}\n\n@keyframes movePattern {\n  0% {\n    transform: translate(-50%, -50%);\n  }\n  100% {\n    transform: translate(-50%, -50%) translate(60px, 60px);\n  }\n}\n\n/* Geometric shapes animation */\n.hero-section::after {\n  content: '';\n  position: absolute;\n  top: 20%;\n  right: 10%;\n  width: 100px;\n  height: 100px;\n  border: 1px solid rgba(74, 130, 153, 0.1);\n  border-radius: 50%;\n  animation: float2 8s ease-in-out infinite;\n  z-index: 1;\n}\n\n@keyframes float2 {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg);\n    opacity: 0.3;\n  }\n  50% {\n    transform: translateY(-20px) rotate(180deg);\n    opacity: 0.6;\n  }\n}\n\n.hero-content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: 1400px;\n  width: 100%;\n  min-height: 100vh;\n  margin: 0 auto;\n  position: relative;\n  z-index: 2;\n}\n\n\n/* Accessibility: Respect reduced motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  .hero-section::before,\n  .hero-section::after {\n    animation: none;\n  }\n}\n\n.hero-text {\n  padding: 4rem 2rem;\n  background: transparent;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  position: relative;\n  z-index: 2;\n}\n\n.hero-title {\n  font-size: 3rem;\n  font-weight: 400;\n  line-height: 1.2;\n  margin-bottom: 2rem;\n  color: #ffffff;\n  letter-spacing: -0.02em;\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  text-align: center;\n  max-width: 1400px;\n}\n\n.gradient-text {\n  color: #000000;\n  font-weight: 300;\n}\n\n.highlight-text {\n  color: #4a8299;\n  font-weight: 400;\n}\n\n.hero-subtitle {\n  font-size: 1.1rem;\n  color: #cccccc;\n  line-height: 1.6;\n  margin-bottom: 3rem;\n  font-weight: 300;\n  max-width: 600px;\n  letter-spacing: 0.01em;\n  text-align: center;\n}\n\n.hero-input-section {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.input-container {\n  position: relative;\n  width: 100%;\n  max-width: 400px;\n}\n\n.hero-input {\n  width: 100%;\n  padding: 1rem 1rem 1rem 1rem;\n  border: none;\n  border-bottom: 1px solid #cccccc;\n  background: transparent;\n  font-size: 1rem;\n  font-family: inherit;\n  color: #000000;\n  transition: all 0.3s ease;\n}\n\n.hero-input:focus {\n  outline: none;\n  border-bottom-color: #000000;\n}\n\n.hero-input::placeholder {\n  color: #999999;\n  font-weight: 300;\n}\n\n.input-submit-btn {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  background: #000000;\n  color: white;\n  border: none;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 1rem;\n}\n\n.input-submit-btn:hover {\n  background: #333333;\n}\n\n.action-tags {\n  display: none;\n}\n\n.hero-3d {\n  background: #000000;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.hero-visual {\n  width: 100%;\n  height: 100vh;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.floating-pdf {\n  width: 300px;\n  height: 400px;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  transform: rotate(-5deg);\n  animation: float 6s ease-in-out infinite;\n}\n\n.pdf-icon {\n  font-size: 4rem;\n  color: #000000;\n  margin-bottom: 1rem;\n}\n\n.pdf-text {\n  color: #000000;\n  font-weight: 300;\n  text-align: center;\n  font-size: 0.9rem;\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: rotate(-5deg) translateY(0px);\n  }\n  50% {\n    transform: rotate(-5deg) translateY(-10px);\n  }\n}\n\n/* Responsive design */\n@media (max-width: 1024px) {\n  .hero-content {\n    grid-template-columns: 1fr;\n    min-height: auto;\n  }\n  \n  .hero-text {\n    padding: 3rem 2rem;\n    text-align: center;\n    min-height: auto;\n  }\n  \n  .hero-visual {\n    height: 60vh;\n  }\n  \n  .hero-title {\n    font-size: 2.5rem;\n  }\n  \n}\n\n@media (max-width: 768px) {\n  .hero-text {\n    padding: 2rem 1.5rem;\n  }\n  \n  .hero-title {\n    font-size: 2rem;\n  }\n  \n  .hero-subtitle {\n    max-width: 100%;\n  }\n  \n  .floating-pdf {\n    width: 250px;\n    height: 330px;\n  }\n  \n}\n\n@media (max-width: 480px) {\n  .hero-title {\n    font-size: 1.75rem;\n  }\n  \n  .floating-pdf {\n    width: 200px;\n    height: 280px;\n  }\n  \n  .pdf-icon {\n    font-size: 3rem;\n  }\n}","size_bytes":5012},"Frontend/src/components/HeroSection.tsx":{"content":"import React from 'react'\nimport { motion } from 'framer-motion'\nimport './HeroSection.css'\n\ninterface HeroSectionProps {\n  onGetStarted: () => void\n}\n\nconst HeroSection: React.FC<HeroSectionProps> = ({ onGetStarted }) => {\n  return (\n    <section className=\"hero-section\">\n      <div className=\"hero-content\">\n        <div className=\"hero-text\">\n          <motion.h1\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"hero-title\"\n          >\n            Where AI Meets <span className=\"highlight-text\">Architectural Marketing</span>.\n          </motion.h1>\n          \n          <motion.p\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"hero-subtitle\"\n          >\nWe help architects turn ideas into polished, engaging lead magnets with the power of AI.\n          </motion.p>\n          \n          <motion.button\n            onClick={onGetStarted}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"hero-cta-button\"\n          >\n            Get Started Free\n          </motion.button>\n          \n        </div>\n        \n      </div>\n    </section>\n  )\n}\n\nexport default HeroSection","size_bytes":1411},"Frontend/src/components/HowItWorksSection.css":{"content":".how-it-works-section {\n  padding: 2rem 2rem 6rem 2rem;\n  background: #1a1a1a;\n  position: relative;\n}\n\n.how-it-works-header {\n  text-align: left;\n  margin-bottom: 4rem;\n  max-width: 1800px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.badge {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(42, 87, 102, 0.1);\n  color: #4a8299;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-size: 0.9rem;\n  font-weight: 500;\n  margin-bottom: 1rem;\n  border: 1px solid rgba(42, 87, 102, 0.2);\n}\n\n.how-it-works-title {\n  font-size: 3rem;\n  font-weight: 600;\n  color: #ffffff;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n  margin: 0;\n}\n\n.steps-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n  max-width: 1800px;\n  margin: 0 auto;\n}\n\n.step-card {\n  background: linear-gradient(145deg, #3a3a3a 0%, #2c2c2c 25%, #1f1f1f 75%, #151515 100%);\n  border-radius: 20px;\n  padding: 2.5rem;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border: 1px solid #444444;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.7), \n              inset 0 1px 0 rgba(255, 255, 255, 0.12),\n              inset 0 -1px 0 rgba(0, 0, 0, 0.4);\n  cursor: pointer;\n}\n\n.step-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(145deg, #3a3a3a 0%, #2c2c2c 25%, #1f1f1f 75%, #151515 100%);\n  opacity: 1;\n  z-index: 0;\n}\n\n.step-card > * {\n  position: relative;\n  z-index: 1;\n}\n\n.step-number {\n  position: absolute;\n  top: 1.5rem;\n  left: 1.5rem;\n  width: 32px;\n  height: 32px;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 0.9rem;\n  color: #6b7280;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.step-icon-container {\n  display: flex;\n  justify-content: center;\n  margin: 2rem 0 1.5rem;\n}\n\n.step-icon {\n  background: #000000;\n  width: 80px;\n  height: 80px;\n  border-radius: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s ease;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.step-content {\n  text-align: center;\n}\n\n/* Animation Styles */\n.step-animation {\n  margin: 1rem 0;\n  height: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n/* Typing Animation */\n.typing-demo {\n  width: 100%;\n  max-width: 260px;\n}\n\n.form-field {\n  position: relative;\n  background: #000000;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  border-radius: 8px;\n  padding: 0.75rem;\n  transition: border-color 0.3s ease;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.form-field input {\n  border: none;\n  outline: none;\n  background: transparent;\n  width: 100%;\n  font-size: 0.9rem;\n  color: #ffffff;\n}\n\n.cursor {\n  position: absolute;\n  right: 0.75rem;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 2px;\n  height: 20px;\n  background: #2a5766;\n}\n\n/* AI Generating Animation */\n.ai-demo {\n  width: 100%;\n  max-width: 260px;\n  height: 80px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.ai-brain {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.75rem;\n  color: #f59e0b;\n  height: 24px;\n  flex-shrink: 0;\n  margin-bottom: 1rem;\n}\n\n.thinking-dots {\n  display: flex;\n  gap: 0.2rem;\n  color: #f59e0b;\n}\n\n.thinking-dots span {\n  font-size: 1.5rem;\n  color: #f59e0b;\n}\n\n.generated-content {\n  background: #000000;\n  border-radius: 8px;\n  padding: 0.75rem;\n  height: 60px;\n  overflow: hidden;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n}\n\n.content-line {\n  font-size: 0.8rem;\n  color: #ffffff;\n  text-align: center;\n  width: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin: 0;\n  padding: 0;\n}\n\n/* Download Animation */\n.download-demo {\n  position: relative;\n  width: 100%;\n  max-width: 200px;\n  height: 80px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.cursor-pointer {\n  position: absolute;\n  top: 10px;\n  left: 20px;\n  color: #4a8299;\n  pointer-events: none;\n}\n\n.download-btn-demo {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: #000000;\n  color: #ffffff;\n  border: none;\n  border-radius: 8px;\n  padding: 0.6rem 1.2rem;\n  font-size: 0.9rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.download-btn-demo:hover {\n  background: #333333;\n  color: #ffffff;\n}\n\n.progress-bar {\n  position: relative;\n  width: 100%;\n  height: 6px;\n  background: #333333;\n  border-radius: 3px;\n  margin-top: 0.5rem;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #2a5766, #2a5766);\n  border-radius: 3px;\n}\n\n.progress-bar span {\n  position: absolute;\n  top: -20px;\n  right: 0;\n  font-size: 0.7rem;\n  color: #6b7280;\n  font-weight: 500;\n}\n\n.step-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #2a5766;\n  margin-bottom: 0.75rem;\n  line-height: 1.3;\n}\n\n.step-title.white-title {\n  color: #ffffff;\n}\n\n.step-subtitle {\n  color: #888888;\n  line-height: 1.6;\n  font-size: 0.95rem;\n  margin: 0;\n  font-weight: 400;\n}\n\n/* Responsive Design */\n@media (max-width: 1024px) {\n  .steps-container {\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 1.5rem;\n  }\n  \n  .how-it-works-title {\n    font-size: 2.5rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .how-it-works-section {\n    padding: 6rem 1rem;\n  }\n  \n  .steps-container {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n  }\n  \n  .step-card {\n    padding: 2rem;\n  }\n  \n  .how-it-works-title {\n    font-size: 2rem;\n  }\n  \n  .step-icon {\n    width: 70px;\n    height: 70px;\n  }\n  \n  .step-icon svg {\n    width: 28px;\n    height: 28px;\n  }\n  \n  .typing-demo, .ai-demo, .download-demo {\n    max-width: 200px;\n  }\n  \n  .form-field {\n    padding: 0.6rem;\n  }\n  \n  .download-btn-demo {\n    padding: 0.5rem 1rem;\n    font-size: 0.8rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .how-it-works-section {\n    padding: 5rem 1rem;\n  }\n  \n  .step-card {\n    padding: 1.5rem;\n  }\n  \n  .how-it-works-title {\n    font-size: 1.75rem;\n  }\n  \n  .step-title {\n    font-size: 1.1rem;\n  }\n  \n  .step-subtitle {\n    font-size: 0.9rem;\n  }\n}","size_bytes":6512},"Frontend/src/components/HowItWorksSection.tsx":{"content":"import React, { useState, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { FileText, Bot, Download, Edit3, MousePointer } from 'lucide-react'\nimport './HowItWorksSection.css'\n\nconst steps = [\n  {\n    step: \"1\",\n    title: \"Enter Your Details\",\n    subtitle: \"Provide your project info, branding, and target audience.\",\n    icon: Edit3,\n    gradient: \"linear-gradient(135deg, #f8e8ff 0%, #e8d5ff 100%)\",\n    iconColor: \"#8b5cf6\"\n  },\n  {\n    step: \"2\", \n    title: \"AI Generates Content\",\n    subtitle: \"Our AI creates structured, engaging, and professional content tailored for architects.\",\n    icon: Bot,\n    gradient: \"linear-gradient(135deg, #fff4e6 0%, #fef3c7 100%)\",\n    iconColor: \"#f59e0b\"\n  },\n  {\n    step: \"3\",\n    title: \"Download Your Lead Magnet\", \n    subtitle: \"Get a polished, 10-page PDF ready to share with clients.\",\n    icon: Download,\n    gradient: \"linear-gradient(135deg, #f0f9ff 0%, #dbeafe 100%)\",\n    iconColor: \"#3b82f6\"\n  }\n]\n\n// Animation components for each step\nconst TypingAnimation: React.FC = () => {\n  const [currentText, setCurrentText] = useState('')\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [isTyping, setIsTyping] = useState(false)\n  const texts = ['Project Name...', 'Modern Villa Design', 'Brand Colors: #2563eb']\n  \n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    \n    const typeText = () => {\n      const fullText = texts[currentIndex]\n      \n      if (!isTyping && currentText === '') {\n        setIsTyping(true)\n      }\n      \n      if (currentText.length < fullText.length && isTyping) {\n        timeout = setTimeout(() => {\n          setCurrentText(fullText.substring(0, currentText.length + 1))\n        }, 80)\n      } else if (currentText.length === fullText.length) {\n        timeout = setTimeout(() => {\n          setIsTyping(false)\n          setCurrentText('')\n          setCurrentIndex((prev) => (prev + 1) % texts.length)\n        }, 2000)\n      }\n    }\n    \n    typeText()\n    return () => clearTimeout(timeout)\n  }, [currentText, currentIndex, isTyping, texts])\n  \n  return (\n    <div className=\"typing-demo\">\n      <div className=\"form-field\">\n        <input type=\"text\" value={currentText} readOnly />\n        <motion.div \n          className=\"cursor\"\n          animate={{ opacity: [1, 0] }}\n          transition={{ duration: 0.8, repeat: Infinity, repeatType: 'reverse' }}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst AIGeneratingAnimation: React.FC = () => {\n  const [currentLineIndex, setCurrentLineIndex] = useState(0)\n  const [isGenerating, setIsGenerating] = useState(true)\n  const contentLines = [\n    'Sustainable Architecture Trends...',\n    'Energy-efficient design principles...',\n    'Modern materials and techniques...',\n    'Client presentation strategies...'\n  ]\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIsGenerating(true)\n      setTimeout(() => {\n        setCurrentLineIndex((prev) => (prev + 1) % contentLines.length)\n        setIsGenerating(false)\n      }, 1000)\n    }, 2500)\n    return () => clearInterval(interval)\n  }, [])\n  \n  return (\n    <div className=\"ai-demo\">\n      <div className=\"ai-brain\">\n        <Bot size={24} />\n        <motion.div\n          className=\"thinking-dots\"\n          animate={{ scale: [1, 1.2, 1] }}\n          transition={{ duration: 1.5, repeat: Infinity }}\n        >\n          <span>•</span><span>•</span><span>•</span>\n        </motion.div>\n      </div>\n      \n      <div className=\"generated-content\">\n        <AnimatePresence mode=\"wait\">\n          {!isGenerating && (\n            <motion.div\n              key={currentLineIndex}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.3 }}\n              className=\"content-line\"\n            >\n              {contentLines[currentLineIndex]}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  )\n}\n\nconst DownloadAnimation: React.FC = () => {\n  const [isClicking, setIsClicking] = useState(false)\n  const [progress, setProgress] = useState(0)\n  \n  useEffect(() => {\n    const sequence = async () => {\n      // Move cursor to button\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      // Click animation\n      setIsClicking(true)\n      await new Promise(resolve => setTimeout(resolve, 200))\n      setIsClicking(false)\n      \n      // Progress animation\n      const progressInterval = setInterval(() => {\n        setProgress(prev => {\n          if (prev >= 100) {\n            clearInterval(progressInterval)\n            setTimeout(() => setProgress(0), 1000)\n            return 100\n          }\n          return prev + 5\n        })\n      }, 100)\n    }\n    \n    const interval = setInterval(sequence, 4000)\n    sequence() // Start immediately\n    \n    return () => clearInterval(interval)\n  }, [])\n  \n  return (\n    <div className=\"download-demo\">\n      <motion.div\n        className=\"cursor-pointer\"\n        animate={{\n          x: [0, 60, 60, 0],\n          y: [0, 0, 0, 0]\n        }}\n        transition={{ duration: 4, repeat: Infinity, repeatDelay: 0 }}\n      >\n        <MousePointer size={20} />\n      </motion.div>\n      \n      <motion.button\n        className=\"download-btn-demo\"\n        animate={{\n          scale: isClicking ? 0.95 : 1\n        }}\n        transition={{ duration: 0.1 }}\n      >\n        <Download size={16} />\n        Download PDF\n      </motion.button>\n      \n      {progress > 0 && (\n        <div className=\"progress-bar\">\n          <motion.div\n            className=\"progress-fill\"\n            initial={{ width: 0 }}\n            animate={{ width: `${progress}%` }}\n            transition={{ duration: 0.1 }}\n          />\n          <span>{progress}%</span>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst HowItWorksSection: React.FC = () => {\n  return (\n    <section className=\"how-it-works-section\">\n      <div className=\"container\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6 }}\n          className=\"how-it-works-header\"\n        >\n          <div className=\"badge\">\n            <FileText size={16} />\n            From concept to conversion.\n          </div>\n          <h2 className=\"how-it-works-title\">How it works</h2>\n        </motion.div>\n\n        <div className=\"steps-container\">\n          {steps.map((step, index) => {\n            const IconComponent = step.icon\n            return (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 50 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n                className=\"step-card\"\n                style={{ background: step.gradient }}\n                whileHover={{ \n                  scale: 1.02,\n                  boxShadow: \"0 20px 40px rgba(0, 0, 0, 0.1)\"\n                }}\n              >\n                <div className=\"step-number\">{step.step}</div>\n                \n                <div className=\"step-icon-container\">\n                  <motion.div \n                    className=\"step-icon\"\n                    whileHover={{ scale: 1.1, rotate: 5 }}\n                    transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n                    style={{ color: step.iconColor }}\n                  >\n                    <IconComponent size={32} />\n                  </motion.div>\n                </div>\n                \n                <div className=\"step-animation\">\n                  {index === 0 && <TypingAnimation />}\n                  {index === 1 && <AIGeneratingAnimation />}\n                  {index === 2 && <DownloadAnimation />}\n                </div>\n\n                <div className=\"step-content\">\n                  <h3 className=\"step-title white-title\">{step.title}</h3>\n                  <p className=\"step-subtitle\">{step.subtitle}</p>\n                </div>\n              </motion.div>\n            )\n          })}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default HowItWorksSection","size_bytes":8267},"Frontend/src/components/LandingPage.css":{"content":"/* Global reset and base styles */\n.landing-page {\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  color: #ffffff;\n  background: #1a1a1a;\n  min-height: 100vh;\n}\n\n/* Navigation */\n.main-nav {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(10px);\n  border-bottom: 1px solid #333333;\n  padding: 1rem 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  z-index: 50;\n  height: 70px;\n}\n\n.nav-brand {\n  font-size: 1.25rem;\n  font-weight: 500;\n  color: #ffffff;\n  letter-spacing: -0.01em;\n}\n\n.nav-center {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.nav-breadcrumb {\n  color: #666666;\n  font-size: 0.9rem;\n  font-weight: 300;\n  cursor: pointer;\n  transition: color 0.2s ease;\n}\n\n.nav-breadcrumb:hover {\n  color: #000000;\n}\n\n.nav-actions {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.user-menu {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.welcome-text {\n  color: #666666;\n  font-weight: 300;\n  font-size: 0.9rem;\n}\n\n.nav-button {\n  background: none;\n  border: none;\n  color: #ffffff;\n  font-weight: 300;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 0.9rem;\n  padding: 0.5rem 0;\n  letter-spacing: 0.01em;\n}\n\n.nav-button.minimal:hover {\n  color: #666666;\n}\n\n.nav-button.black-btn {\n  background: #2a5766;\n  color: #ffffff;\n  padding: 0.6rem 1.5rem;\n  border-radius: 8px;\n  font-weight: 500;\n}\n\n.nav-button.black-btn:hover {\n  background: #2a5766;\n  transform: translateY(-1px);\n}\n\n.nav-button.white-btn {\n  background: transparent;\n  color: #ffffff;\n  border: 1px solid #444444;\n  padding: 0.6rem 1.5rem;\n  border-radius: 8px;\n  font-weight: 500;\n  margin-right: 1rem;\n}\n\n.nav-button.white-btn:hover {\n  border-color: #2a5766;\n  background: rgba(42, 87, 102, 0.1);\n  transform: translateY(-1px);\n}\n\n/* Adjust hero section for navigation */\n.landing-page .hero-section {\n  padding-top: 70px;\n}\n\n/* Features Section */\n.features-section {\n  background: #ffffff;\n  padding: 8rem 3rem;\n  text-align: center;\n}\n\n.features-title {\n  font-size: 2rem;\n  font-weight: 300;\n  color: #000000;\n  margin-bottom: 4rem;\n  letter-spacing: -0.02em;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 4rem;\n  max-width: 1800px;\n  margin: 0 auto;\n}\n\n.feature-card {\n  background: #ffffff;\n  padding: 2rem;\n  border: 1px solid #f0f0f0;\n  transition: all 0.3s ease;\n  text-align: left;\n}\n\n.feature-card:hover {\n  border-color: #e0e0e0;\n}\n\n.feature-icon {\n  font-size: 2rem;\n  margin-bottom: 1.5rem;\n  display: block;\n}\n\n.feature-title {\n  font-size: 1.25rem;\n  font-weight: 400;\n  color: #000000;\n  margin-bottom: 1rem;\n  letter-spacing: -0.01em;\n}\n\n.feature-description {\n  color: #666666;\n  line-height: 1.6;\n  font-weight: 300;\n  font-size: 0.95rem;\n}\n\n/* Demo Section */\n.demo-section {\n  background: #000000;\n  color: #ffffff;\n  padding: 8rem 3rem;\n  text-align: center;\n}\n\n.demo-title {\n  font-size: 2rem;\n  font-weight: 300;\n  margin-bottom: 2rem;\n  letter-spacing: -0.02em;\n}\n\n.demo-subtitle {\n  color: #cccccc;\n  font-size: 1rem;\n  font-weight: 300;\n  margin-bottom: 4rem;\n  max-width: 900px;\n  margin-left: auto;\n  margin-right: auto;\n  line-height: 1.6;\n}\n\n.demo-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 2rem;\n  max-width: 1600px;\n  margin: 0 auto;\n}\n\n.demo-card {\n  background: #111111;\n  padding: 2rem;\n  border: 1px solid #333333;\n  transition: all 0.3s ease;\n}\n\n.demo-card:hover {\n  border-color: #555555;\n}\n\n.demo-card-title {\n  color: #ffffff;\n  font-size: 1.1rem;\n  font-weight: 400;\n  margin-bottom: 1rem;\n}\n\n.demo-card-description {\n  color: #cccccc;\n  font-size: 0.9rem;\n  font-weight: 300;\n  line-height: 1.5;\n}\n\n/* Footer */\n.footer {\n  background: #ffffff;\n  padding: 6rem 3rem 3rem;\n  border-top: 1px solid #f0f0f0;\n  text-align: center;\n}\n\n.footer-newsletter {\n  margin-bottom: 4rem;\n}\n\n.newsletter-title {\n  font-size: 1.5rem;\n  font-weight: 300;\n  color: #000000;\n  margin-bottom: 2rem;\n  letter-spacing: -0.01em;\n}\n\n.newsletter-form {\n  display: flex;\n  justify-content: center;\n  gap: 0;\n  max-width: 400px;\n  margin: 0 auto;\n}\n\n.newsletter-input {\n  flex: 1;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  background: #ffffff;\n  font-size: 0.9rem;\n  font-family: inherit;\n  color: #000000;\n}\n\n.newsletter-input:focus {\n  outline: none;\n  border-color: #000000;\n}\n\n.newsletter-input::placeholder {\n  color: #999999;\n}\n\n.newsletter-button {\n  background: #000000;\n  color: #ffffff;\n  border: none;\n  padding: 1rem 2rem;\n  font-size: 0.9rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n\n.newsletter-button:hover {\n  background: #333333;\n}\n\n.footer-links {\n  display: flex;\n  justify-content: center;\n  gap: 3rem;\n  margin-bottom: 2rem;\n}\n\n.footer-link {\n  color: #666666;\n  text-decoration: none;\n  font-size: 0.9rem;\n  font-weight: 300;\n  transition: color 0.2s ease;\n}\n\n.footer-link:hover {\n  color: #000000;\n}\n\n.footer-bottom {\n  color: #999999;\n  font-size: 0.8rem;\n  font-weight: 300;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .main-nav {\n    padding: 1rem 1.5rem;\n  }\n  \n  .nav-center {\n    display: none;\n  }\n  \n  .features-section,\n  .demo-section {\n    padding: 4rem 1.5rem;\n  }\n  \n  .footer {\n    padding: 4rem 1.5rem 2rem;\n  }\n  \n  .footer-links {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .newsletter-form {\n    flex-direction: column;\n  }\n  \n  .newsletter-input {\n    margin-bottom: 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .features-title,\n  .demo-title,\n  .newsletter-title {\n    font-size: 1.5rem;\n  }\n  \n  .features-grid {\n    grid-template-columns: 1fr;\n    gap: 2rem;\n  }\n}","size_bytes":5740},"Frontend/src/components/LandingPage.tsx":{"content":"import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport HeroSection from './HeroSection'\nimport HowItWorksSection from './HowItWorksSection'\nimport FeaturesSection from './FeaturesSection'\nimport DemoSection from './DemoSection'\nimport Footer from './Footer'\nimport './LandingPage.css'\n\nconst LandingPage: React.FC = () => {\n  const navigate = useNavigate()\n  const { isAuthenticated } = useAuth()\n\n  // If user is already logged in, redirect to dashboard\n  React.useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/dashboard')\n    }\n  }, [isAuthenticated, navigate])\n\n  const handleLoginClick = () => {\n    navigate('/login')\n  }\n\n  const handleSignupClick = () => {\n    navigate('/signup')\n  }\n\n  return (\n    <div className=\"landing-page\">\n      <nav className=\"main-nav\">\n        <div className=\"nav-brand\">Forma</div>\n        <div className=\"nav-actions\">\n          <button className=\"nav-button white-btn\" onClick={handleLoginClick}>\n            Login\n          </button>\n          <button className=\"nav-button black-btn\" onClick={handleSignupClick}>\n            Sign Up\n          </button>\n        </div>\n      </nav>\n      \n      <HeroSection onGetStarted={handleSignupClick} />\n      <HowItWorksSection />\n      <FeaturesSection />\n      <DemoSection />\n      <Footer />\n    </div>\n  )\n}\n\nexport default LandingPage","size_bytes":1409},"Frontend/src/index.css":{"content":":root {\n  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  min-width: 320px;\n  min-height: 100vh;\n  width: 100%;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 0.6em 1.2em;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #1a1a1a;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\nbutton:hover {\n  border-color: #646cff;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n","size_bytes":1143},"Frontend/src/main.tsx":{"content":"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>,\n)\n","size_bytes":322},"Frontend/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: true,\n  },\n})\n","size_bytes":239},"replit.md":{"content":"# Project Overview\n\n## Overview\n\nThis is a full-stack web application with a React frontend and Django backend, designed for development on the Replit platform. The frontend is built with React 19, TypeScript, and Vite for fast development and modern tooling. The backend uses Django 5.0 with a clean project structure ready for API development and web services.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 19 with TypeScript for type safety and modern React features\n- **Build Tool**: Vite for fast development server and optimized builds\n- **Development Server**: Configured to run on `0.0.0.0:5000` for Replit compatibility\n- **Code Quality**: ESLint with TypeScript integration and React-specific rules\n- **Styling**: CSS modules with modern CSS features and responsive design patterns\n\n### Backend Architecture\n- **Framework**: Django 5.0 following standard Django project structure\n- **Project Structure**: Clean separation with `django_project` as the main configuration package\n- **Deployment**: Pre-configured for Replit with environment-based domain handling\n- **Security**: CSRF protection configured for multiple trusted origins\n- **Server Configuration**: Both WSGI and ASGI support for different deployment scenarios\n\n### Development Setup\n- **Monorepo Structure**: Frontend and Backend as separate directories for clear separation of concerns\n- **Environment Configuration**: Replit-specific settings for seamless cloud development\n- **Hot Reload**: Frontend configured with Vite's fast refresh for rapid development cycles\n\n## External Dependencies\n\n### Frontend Dependencies\n- **React Ecosystem**: React 19.1.1 and React DOM for modern component architecture\n- **Development Tools**: \n  - Vite 7.1.7 for build tooling and development server\n  - TypeScript 5.8.3 for static type checking\n  - ESLint with React-specific plugins for code quality\n- **Build Pipeline**: Vite with React plugin for optimized production builds\n\n### Backend Dependencies\n- **Core Framework**: Django 5.0 for web framework and ORM capabilities\n- **Database**: Currently using Django's default SQLite (ready for PostgreSQL integration)\n- **Authentication**: Django's built-in authentication system\n- **Admin Interface**: Django admin for content management\n\n### Platform Integration\n- **Replit Platform**: Environment variables and domain configuration for seamless Replit deployment\n- **Security Configuration**: CSRF and allowed hosts configured for Replit's domain structure\n- **Development Environment**: Both frontend and backend configured for Replit's development workflow","size_bytes":2679},"Frontend/src/components/Dashboard.css":{"content":"/* Dashboard Container */\n.dashboard {\n  min-height: 100vh;\n  background: #1a1a1a;\n  color: #ffffff;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  width: calc(100vw - 10px);\n  margin: 0;\n  padding: 0;\n  max-width: none;\n}\n\n/* Top Navigation */\n.dashboard-nav {\n  background: #1a1a1a;\n  border-bottom: 1px solid #333333;\n  padding: 0.75rem 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.nav-brand {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #ffffff;\n  letter-spacing: -0.02em;\n}\n\n.nav-actions {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.user-menu {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  color: #cccccc;\n}\n\n.user-icon {\n  color: #cccccc;\n}\n\n.user-name {\n  font-size: 0.875rem;\n  color: #cccccc;\n}\n\n.logout-btn {\n  background: none;\n  border: none;\n  color: #cccccc;\n  cursor: pointer;\n  padding: 0.25rem;\n  transition: color 0.3s ease;\n}\n\n.logout-btn:hover {\n  color: #ffffff;\n}\n\n/* Dashboard Layout */\n.dashboard-layout {\n  display: flex;\n  min-height: calc(100vh - 80px);\n}\n\n/* Sidebar */\n.dashboard-sidebar {\n  width: 280px;\n  background: #1a1a1a;\n  border-right: 1px solid #333333;\n  padding: 2rem;\n  flex-shrink: 0;\n}\n\n.sidebar-brand {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n  padding-bottom: 2rem;\n  border-bottom: 1px solid #333333;\n}\n\n.brand-icon {\n  font-size: 2rem;\n  width: 48px;\n  height: 48px;\n  background: #2a5766;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.brand-info h3 {\n  margin: 0;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.brand-info p {\n  margin: 0;\n  font-size: 0.875rem;\n  color: #666666;\n}\n\n.sidebar-create-btn {\n  width: 100%;\n  background: #2a5766;\n  color: #ffffff;\n  border: none;\n  padding: 0.875rem 1rem;\n  border-radius: 8px;\n  font-size: 0.875rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 2rem;\n}\n\n.sidebar-create-btn:hover {\n  background: #346073;\n  transform: translateY(-1px);\n}\n\n.sidebar-section {\n  margin-bottom: 2rem;\n}\n\n.sidebar-section h4 {\n  margin: 0 0 1rem 0;\n  font-size: 0.75rem;\n  font-weight: 600;\n  color: #666666;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.sidebar-nav {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.nav-item {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n  color: #cccccc;\n  text-decoration: none;\n  font-size: 0.875rem;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.nav-item:hover {\n  background: #333333;\n  color: #ffffff;\n}\n\n.nav-item.active {\n  background: #2a5766;\n  color: #ffffff;\n}\n\n/* Main Content */\n.dashboard-main-content {\n  flex: 1;\n  padding: 2rem;\n  background: #1a1a1a;\n  overflow-y: auto;\n  width: 100%;\n  max-width: none;\n}\n\n.main-header {\n  margin-bottom: 3rem;\n}\n\n.header-top {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.main-title {\n  font-size: 2.5rem;\n  font-weight: 400;\n  color: #ffffff;\n  margin: 0;\n  letter-spacing: -0.02em;\n}\n\n.main-subtitle {\n  font-size: 1rem;\n  color: #666666;\n  margin: 0;\n  font-weight: 400;\n}\n\n.create-btn-header {\n  background: #2a5766;\n  color: #ffffff;\n  border: none;\n  padding: 0.875rem 1.25rem;\n  border-radius: 8px;\n  font-size: 0.875rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.create-btn-header:hover {\n  background: #346073;\n  transform: translateY(-2px);\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 3rem;\n}\n\n.stat-card {\n  background: #262626;\n  border: 1px solid #333333;\n  padding: 1.5rem;\n  border-radius: 12px;\n  transition: all 0.3s ease;\n}\n\n.stat-card:hover {\n  border-color: #2a5766;\n  transform: translateY(-2px);\n}\n\n.stat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n  color: #666666;\n  font-weight: 500;\n}\n\n.stat-icon {\n  color: #2a5766;\n  width: 20px;\n  height: 20px;\n}\n\n.stat-value {\n  font-size: 2.5rem;\n  font-weight: 600;\n  color: #ffffff;\n  margin: 0;\n}\n\n/* Content Section */\n.content-section {\n  margin-top: 2rem;\n  width: 100%;\n}\n\n.search-section {\n  margin-bottom: 2rem;\n}\n\n.search-wrapper {\n  width: 100%;\n}\n\n.search-input {\n  width: 100%;\n  background: #262626;\n  border: 1px solid #333333;\n  color: #ffffff;\n  padding: 0.875rem 1rem;\n  border-radius: 8px;\n  font-size: 0.875rem;\n  transition: all 0.3s ease;\n}\n\n.search-input::placeholder {\n  color: #666666;\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #2a5766;\n  box-shadow: 0 0 0 3px rgba(42, 87, 102, 0.1);\n}\n\n/* Projects Grid */\n.projects-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 1.5rem;\n  width: 100%;\n}\n\n.project-card {\n  background: #262626;\n  border: 1px solid #333333;\n  border-radius: 12px;\n  padding: 1.5rem;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.project-card:hover {\n  border-color: #2a5766;\n  transform: translateY(-2px);\n}\n\n.project-card.completed {\n  border-left: 4px solid #4caf50;\n}\n\n.project-card.in-progress {\n  border-left: 4px solid #2196f3;\n}\n\n.project-card.draft {\n  border-left: 4px solid #ff9800;\n}\n\n.project-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 1rem;\n  margin-bottom: 1rem;\n}\n\n.project-avatar {\n  width: 48px;\n  height: 48px;\n  background: #2a5766;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n}\n\n.project-icon {\n  color: #ffffff;\n  width: 24px;\n  height: 24px;\n}\n\n.project-info {\n  flex: 1;\n}\n\n.project-title {\n  margin: 0 0 0.5rem 0;\n  font-size: 1rem;\n  font-weight: 600;\n  color: #ffffff;\n  line-height: 1.4;\n}\n\n.status-badge {\n  font-size: 0.75rem;\n  font-weight: 500;\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n.status-badge.completed {\n  background: rgba(76, 175, 80, 0.1);\n  color: #4caf50;\n}\n\n.status-badge.in-progress {\n  background: rgba(33, 150, 243, 0.1);\n  color: #2196f3;\n}\n\n.status-badge.draft {\n  background: rgba(255, 152, 0, 0.1);\n  color: #ff9800;\n}\n\n.project-menu {\n  background: none;\n  border: none;\n  color: #666666;\n  cursor: pointer;\n  padding: 0.25rem;\n  font-size: 1rem;\n  font-weight: bold;\n  transition: color 0.3s ease;\n}\n\n.project-menu:hover {\n  color: #ffffff;\n}\n\n.project-description {\n  font-size: 0.875rem;\n  color: #cccccc;\n  line-height: 1.5;\n  margin: 0 0 1.5rem 0;\n}\n\n.project-metrics {\n  display: flex;\n  gap: 2rem;\n  margin-bottom: 1rem;\n  padding: 1rem 0;\n  border-top: 1px solid #333333;\n  border-bottom: 1px solid #333333;\n}\n\n.metric {\n  text-align: center;\n}\n\n.metric-value {\n  display: block;\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #ffffff;\n  margin-bottom: 0.25rem;\n}\n\n.metric-label {\n  font-size: 0.75rem;\n  color: #666666;\n  font-weight: 500;\n}\n\n.project-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.project-last-activity {\n  font-size: 0.75rem;\n  color: #666666;\n}\n\n/* No Results */\n.no-results {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 3rem 2rem;\n  color: #666666;\n}\n\n.no-results p {\n  font-size: 1rem;\n  margin: 0;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .dashboard-layout {\n    flex-direction: column;\n  }\n  \n  .dashboard-sidebar {\n    width: 100%;\n    border-right: none;\n    border-bottom: 1px solid #333333;\n  }\n  \n  .dashboard-main-content {\n    padding: 1rem;\n  }\n  \n  .main-title {\n    font-size: 2rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .projects-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .header-top {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n}","size_bytes":8076},"Frontend/src/components/Dashboard.tsx":{"content":"import React, { useState, useMemo, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { motion } from 'framer-motion'\nimport { FileText, Download, Plus, Settings, LogOut, User } from 'lucide-react'\nimport { useAuth } from '../contexts/AuthContext'\nimport { dashboardApi } from '../lib/dashboardApi'\nimport type { DashboardStats, LeadMagnet } from '../lib/dashboardApi'\nimport LeadMagnetFormContent from './LeadMagnetFormContent'\nimport './Dashboard.css'\n\ninterface DashboardProps {}\n\nconst Dashboard: React.FC<DashboardProps> = () => {\n  const { user, logout } = useAuth()\n  const navigate = useNavigate()\n  const [searchQuery, setSearchQuery] = useState('')\n  const [stats, setStats] = useState<DashboardStats | null>(null)\n  const [projects, setProjects] = useState<LeadMagnet[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [showLeadMagnetForm, setShowLeadMagnetForm] = useState(false)\n\n  const handleLogout = () => {\n    logout()\n    navigate('/')\n  }\n  \n  // Fetch dashboard data on component mount\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setLoading(true)\n        const [statsData, projectsData] = await Promise.all([\n          dashboardApi.getStats(),\n          dashboardApi.getLeadMagnets()\n        ])\n        setStats(statsData)\n        setProjects(projectsData)\n        setError(null)\n      } catch (err) {\n        console.error('Failed to fetch dashboard data:', err)\n        setError('Failed to load dashboard data')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchDashboardData()\n  }, [])\n\n  const filteredProjects = useMemo(() => {\n    if (!searchQuery.trim()) return projects\n    const query = searchQuery.toLowerCase()\n    return projects.filter(project => \n      project.title.toLowerCase().includes(query) ||\n      project.status.toLowerCase().includes(query)\n    )\n  }, [projects, searchQuery])\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString)\n    const now = new Date()\n    const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24))\n    \n    if (diffInDays === 0) return 'Today'\n    if (diffInDays === 1) return '1 day ago'\n    if (diffInDays < 7) return `${diffInDays} days ago`\n    return date.toLocaleDateString()\n  }\n\n  if (loading) {\n    return (\n      <div className=\"dashboard\">\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', color: '#ffffff' }}>\n          Loading dashboard...\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard\">\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', color: '#ff6b6b' }}>\n          {error}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <nav className=\"dashboard-nav\">\n        <div className=\"nav-brand\">Forma</div>\n        <div className=\"nav-actions\">\n          <div className=\"user-menu\">\n            <User className=\"user-icon\" size={20} />\n            <span className=\"user-name\">{user?.name}</span>\n            <button className=\"logout-btn\" onClick={handleLogout}>\n              <LogOut size={18} />\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"dashboard-layout\">\n        <aside className=\"dashboard-sidebar\">\n          <div className=\"sidebar-brand\">\n            <div className=\"brand-icon\">📄</div>\n            <div className=\"brand-info\">\n              <h3>AI Lead Magnets</h3>\n              <p>Your AI Workforce</p>\n            </div>\n          </div>\n          \n          <button \n            className=\"sidebar-create-btn\"\n            onClick={() => setShowLeadMagnetForm(true)}\n          >\n            <Plus size={20} />\n            Create Lead Magnet\n          </button>\n\n          <div className=\"sidebar-section\">\n            <h4>Navigation</h4>\n            <nav className=\"sidebar-nav\">\n              <a href=\"#\" className=\"nav-item active\">\n                <FileText size={18} />\n                My Lead Magnets\n              </a>\n              <a href=\"#\" className=\"nav-item\">\n                <Download size={18} />\n                Active Campaigns\n              </a>\n              <a href=\"#\" className=\"nav-item\">\n                <Settings size={18} />\n                Integrations\n              </a>\n              <a href=\"#\" className=\"nav-item\">\n                <User size={18} />\n                Analytics\n              </a>\n            </nav>\n          </div>\n\n          <div className=\"sidebar-section\">\n            <h4>Account</h4>\n            <nav className=\"sidebar-nav\">\n              <a href=\"#\" className=\"nav-item\">\n                <Settings size={18} />\n                Settings\n              </a>\n            </nav>\n          </div>\n        </aside>\n\n        <main className=\"dashboard-main-content\">\n          {showLeadMagnetForm ? (\n            <LeadMagnetFormContent \n              onClose={() => setShowLeadMagnetForm(false)}\n              onSuccess={(message) => {\n                setShowLeadMagnetForm(false);\n                // Refresh dashboard data\n                const fetchDashboardData = async () => {\n                  try {\n                    const [statsData, projectsData] = await Promise.all([\n                      dashboardApi.getStats(),\n                      dashboardApi.getLeadMagnets()\n                    ])\n                    setStats(statsData)\n                    setProjects(projectsData)\n                  } catch (err) {\n                    console.error('Failed to refresh dashboard data:', err)\n                  }\n                }\n                fetchDashboardData();\n              }}\n            />\n          ) : (\n            <>\n              <div className=\"main-header\">\n                <div className=\"header-top\">\n                  <motion.h1\n                    initial={{ opacity: 0, y: 30 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"main-title\"\n                  >\n                    My Lead Magnets\n                  </motion.h1>\n                  <motion.button\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.1 }}\n                    className=\"create-btn-header\"\n                    onClick={() => setShowLeadMagnetForm(true)}\n                  >\n                    <Plus size={20} />\n                    Create Lead Magnet\n                  </motion.button>\n                </div>\n            <motion.p\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"main-subtitle\"\n            >\n              Manage and interact with your AI-powered lead magnets\n            </motion.p>\n          </div>\n\n          <div className=\"stats-grid\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"stat-card\"\n            >\n              <div className=\"stat-header\">\n                <span className=\"stat-label\">Total Lead Magnets</span>\n                <FileText className=\"stat-icon\" />\n              </div>\n              <div className=\"stat-value\">{stats?.total_lead_magnets || 0}</div>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"stat-card\"\n            >\n              <div className=\"stat-header\">\n                <span className=\"stat-label\">Active Lead Magnets</span>\n                <Download className=\"stat-icon\" />\n              </div>\n              <div className=\"stat-value\">{stats?.active_lead_magnets || 0}</div>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n              className=\"stat-card\"\n            >\n              <div className=\"stat-header\">\n                <span className=\"stat-label\">Total Downloads</span>\n                <Settings className=\"stat-icon\" />\n              </div>\n              <div className=\"stat-value\">{stats?.total_downloads || 0}</div>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.5 }}\n              className=\"stat-card\"\n            >\n              <div className=\"stat-header\">\n                <span className=\"stat-label\">Leads Generated</span>\n                <User className=\"stat-icon\" />\n              </div>\n              <div className=\"stat-value\">{stats?.leads_generated || 0}</div>\n            </motion.div>\n          </div>\n\n          <div className=\"content-section\">\n            <div className=\"search-section\">\n              <div className=\"search-wrapper\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search lead magnets...\"\n                  className=\"search-input\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div className=\"projects-grid\">\n              {filteredProjects.length === 0 ? (\n                <div className=\"no-results\">\n                  {searchQuery.trim() ? (\n                    <p>No lead magnets found matching \"{searchQuery}\"</p>\n                  ) : (\n                    <div>\n                      <p>No lead magnets created yet</p>\n                      <p style={{ fontSize: '0.9rem', color: '#888', marginTop: '0.5rem' }}>Click \"Create Lead Magnet\" to get started</p>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                filteredProjects.map((project, index) => (\n                  <motion.div\n                    key={project.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.5 + index * 0.1 }}\n                    className={`project-card ${project.status}`}\n                  >\n                    <div className=\"project-header\">\n                      <div className=\"project-avatar\">\n                        <FileText className=\"project-icon\" />\n                      </div>\n                      <div className=\"project-info\">\n                        <h3 className=\"project-title\">{project.title}</h3>\n                        <span className={`status-badge ${project.status}`}>\n                          {project.status === 'in-progress' ? 'In Progress' : \n                           project.status === 'completed' ? 'Completed' : 'Draft'}\n                        </span>\n                      </div>\n                      <button className=\"project-menu\">⋮</button>\n                    </div>\n                    \n                    <p className=\"project-description\">\n                      {project.description || \n                       (project.status === 'completed' ? 'Generates high-quality leads for architectural services' :\n                        project.status === 'in-progress' ? 'Converting prospects into qualified leads' : \n                        'Draft lead magnet ready for review')}\n                    </p>\n                    \n                    <div className=\"project-metrics\">\n                      <div className=\"metric\">\n                        <span className=\"metric-value\">{project.downloads_count}</span>\n                        <span className=\"metric-label\">Downloads</span>\n                      </div>\n                      <div className=\"metric\">\n                        <span className=\"metric-value\">{project.leads_count}</span>\n                        <span className=\"metric-label\">Leads Generated</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"project-footer\">\n                      <span className=\"project-last-activity\">Created: {formatDate(project.created_at)}</span>\n                    </div>\n                  </motion.div>\n                ))\n              )}\n            </div>\n              </div>\n            </>\n          )}\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard","size_bytes":12586},"Frontend/src/components/LoginPage.tsx":{"content":"import React, { useState } from 'react'\nimport { Link, useNavigate, useLocation } from 'react-router-dom'\nimport { motion } from 'framer-motion'\nimport { Eye, EyeOff, Mail, Lock, ArrowLeft } from 'lucide-react'\nimport { useAuth } from '../contexts/AuthContext'\nimport './AuthPages.css'\n\nconst LoginPage: React.FC = () => {\n  const [formData, setFormData] = useState({\n    username_or_email: '',\n    password: '',\n  })\n  const [showPassword, setShowPassword] = useState(false)\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n  \n  const { login } = useAuth()\n  const navigate = useNavigate()\n  const location = useLocation()\n  \n  // Get success message from navigation state\n  const successMessage = location.state?.message\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    })\n    if (error) setError('')\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    console.log('Login form submitted with data:', { username_or_email: formData.username_or_email, password: '***' })\n    \n    if (!formData.username_or_email || !formData.password) {\n      setError('Please fill in all fields')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n\n    try {\n      console.log('Calling login function...')\n      await login(formData.username_or_email, formData.password)\n      console.log('Login successful, navigating to dashboard...')\n      navigate('/dashboard')\n    } catch (err: any) {\n      console.error('Login error:', err)\n      if (err.response?.data) {\n        const errorData = err.response.data\n        if (errorData.non_field_errors && Array.isArray(errorData.non_field_errors)) {\n          setError(errorData.non_field_errors[0])\n        } else if (errorData.detail) {\n          setError(errorData.detail)\n        } else {\n          setError('Login failed. Please check your credentials.')\n        }\n      } else if (err.code === 'ECONNABORTED' || err.message.includes('timeout')) {\n        setError('Request timed out. Please try again.')\n      } else if (err.request) {\n        setError('Unable to connect to server. Please check your connection and try again.')\n      } else {\n        setError('An unexpected error occurred. Please try again.')\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"auth-overlay\">\n      <motion.div \n        className=\"auth-container\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"auth-header\">\n          <Link to=\"/\" className=\"back-button\">\n            <ArrowLeft size={20} />\n            Back to Home\n          </Link>\n          <div className=\"auth-logo\">Forma</div>\n          <h2>Welcome Back</h2>\n          <p>Sign in to your account</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"auth-form\">\n          {successMessage && (\n            <motion.div \n              className=\"auth-success\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n            >\n              {successMessage}\n            </motion.div>\n          )}\n          \n          {error && (\n            <motion.div \n              className=\"auth-error\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n            >\n              {error}\n            </motion.div>\n          )}\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <Mail className=\"input-icon\" size={20} />\n              <input\n                type=\"text\"\n                name=\"username_or_email\"\n                placeholder=\"Username or email address\"\n                value={formData.username_or_email}\n                onChange={handleChange}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <Lock className=\"input-icon\" size={20} />\n              <input\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n              />\n              <button\n                type=\"button\"\n                className=\"password-toggle\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n              </button>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"auth-submit\"\n            disabled={loading}\n          >\n            {loading ? 'Signing In...' : 'Sign In'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>\n            Don't have an account?{' '}\n            <Link to=\"/signup\" className=\"auth-link\">\n              Sign up here\n            </Link>\n          </p>\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default LoginPage","size_bytes":5209},"Frontend/src/components/ProtectedRoute.tsx":{"content":"import React, { type ReactNode } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\n\ninterface ProtectedRouteProps {\n  children: ReactNode\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\n  const { isAuthenticated, loading } = useAuth()\n\n  if (loading) {\n    return (\n      <div className=\"auth-overlay\">\n        <div className=\"auth-container\" style={{ textAlign: 'center' }}>\n          <div style={{ padding: '2rem' }}>\n            <h3>Loading...</h3>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />\n  }\n\n  return <>{children}</>\n}\n\nexport default ProtectedRoute","size_bytes":726},"Frontend/src/components/SignupPage.tsx":{"content":"import React, { useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { motion } from 'framer-motion'\nimport { Eye, EyeOff, User, Mail, Phone, Lock, ArrowLeft } from 'lucide-react'\nimport { useAuth } from '../contexts/AuthContext'\nimport './AuthPages.css'\n\nconst SignupPage: React.FC = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    username: '',\n    email: '',\n    phone_number: '',\n    password: '',\n    password_confirm: '',\n  })\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n  \n  const { register } = useAuth()\n  const navigate = useNavigate()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    })\n    if (error) setError('')\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    console.log('Signup form submitted with data:', formData)\n    \n    if (!formData.name || !formData.username || !formData.email || !formData.password || !formData.password_confirm) {\n      setError('Please fill in all required fields (name, username, email, password)')\n      return\n    }\n\n    if (formData.password !== formData.password_confirm) {\n      setError('Passwords do not match')\n      return\n    }\n\n    if (formData.password.length < 8) {\n      setError('Password must be at least 8 characters long')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n\n    try {\n      console.log('Calling register function...')\n      await register(formData.email, formData.username, formData.password, formData.name, formData.phone_number)\n      console.log('Registration successful, navigating to login...')\n      navigate('/login', { state: { message: 'Account created successfully! Please sign in with your credentials.' } })\n    } catch (err: any) {\n      console.error('Signup error:', err)\n      if (err.response?.data) {\n        const errorData = err.response.data\n        if (errorData.email && Array.isArray(errorData.email)) {\n          setError(errorData.email[0])\n        } else if (errorData.password && Array.isArray(errorData.password)) {\n          setError(errorData.password[0])\n        } else if (errorData.non_field_errors && Array.isArray(errorData.non_field_errors)) {\n          setError(errorData.non_field_errors[0])\n        } else if (errorData.detail) {\n          setError(errorData.detail)\n        } else {\n          setError('Registration failed. Please check your information.')\n        }\n      } else if (err.code === 'ECONNABORTED' || err.message.includes('timeout')) {\n        setError('Request timed out. Please try again.')\n      } else if (err.request) {\n        setError('Unable to connect to server. Please check your connection and try again.')\n      } else {\n        setError('An unexpected error occurred. Please try again.')\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"auth-overlay\">\n      <motion.div \n        className=\"auth-container\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"auth-header\">\n          <Link to=\"/\" className=\"back-button\">\n            <ArrowLeft size={20} />\n            Back to Home\n          </Link>\n          <div className=\"auth-logo\">Forma</div>\n          <h2>Create Account</h2>\n          <p>Join us to get started</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"auth-form\">\n          {error && (\n            <motion.div \n              className=\"auth-error\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n            >\n              {error}\n            </motion.div>\n          )}\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <User className=\"input-icon\" size={20} />\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Full name\"\n                value={formData.name}\n                onChange={handleChange}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <User className=\"input-icon\" size={20} />\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Username\"\n                value={formData.username}\n                onChange={handleChange}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <Mail className=\"input-icon\" size={20} />\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email address\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <Phone className=\"input-icon\" size={20} />\n              <input\n                type=\"tel\"\n                name=\"phone_number\"\n                placeholder=\"Phone number (optional)\"\n                value={formData.phone_number}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <Lock className=\"input-icon\" size={20} />\n              <input\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n              />\n              <button\n                type=\"button\"\n                className=\"password-toggle\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n              </button>\n            </div>\n          </div>\n\n          <div className=\"auth-field\">\n            <div className=\"input-wrapper\">\n              <Lock className=\"input-icon\" size={20} />\n              <input\n                type={showConfirmPassword ? 'text' : 'password'}\n                name=\"password_confirm\"\n                placeholder=\"Confirm password\"\n                value={formData.password_confirm}\n                onChange={handleChange}\n                required\n              />\n              <button\n                type=\"button\"\n                className=\"password-toggle\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              >\n                {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n              </button>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"auth-submit\"\n            disabled={loading}\n            onClick={() => console.log('Signup button clicked!')}\n          >\n            {loading ? 'Creating Account...' : 'Create Account'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>\n            Already have an account?{' '}\n            <Link to=\"/login\" className=\"auth-link\">\n              Sign in here\n            </Link>\n          </p>\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default SignupPage","size_bytes":7696},"Frontend/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, type ReactNode } from 'react'\nimport { apiClient } from '../lib/apiClient'\n\ninterface User {\n  id: number\n  email: string\n  username: string\n  name: string\n  phone_number?: string\n}\n\ninterface AuthContextType {\n  user: User | null\n  loading: boolean\n  login: (username_or_email: string, password: string) => Promise<void>\n  signup: (email: string, username: string, password: string, name: string, phone_number: string) => Promise<void>\n  register: (email: string, username: string, password: string, name: string, phone_number: string) => Promise<void>\n  logout: () => void\n  isAuthenticated: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\n\ninterface AuthProviderProps {\n  children: ReactNode\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const isAuthenticated = !!user\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token')\n      if (token) {\n        try {\n          const response = await apiClient.get('/api/auth/profile/')\n          setUser(response.data)\n        } catch (error) {\n          console.error('Auth check failed:', error)\n          localStorage.removeItem('access_token')\n          localStorage.removeItem('refresh_token')\n        }\n      }\n      setLoading(false)\n    }\n\n    checkAuth()\n  }, [])\n\n  const login = async (username_or_email: string, password: string) => {\n    try {\n      const response = await apiClient.post('/api/auth/login/', {\n        username_or_email,\n        password,\n      })\n\n      const { access, refresh } = response.data\n      localStorage.setItem('access_token', access)\n      localStorage.setItem('refresh_token', refresh)\n\n      // Fetch user profile\n      const profileResponse = await apiClient.get('/api/auth/profile/')\n      setUser(profileResponse.data)\n    } catch (error: any) {\n      console.error('Login failed:', error)\n      throw error\n    }\n  }\n\n  const signup = async (email: string, username: string, password: string, name: string, phone_number: string) => {\n    try {\n      const response = await apiClient.post('/api/auth/register/', {\n        email,\n        username,\n        password,\n        password_confirm: password,\n        name,\n        phone_number,\n      })\n\n      const { access, refresh } = response.data\n      localStorage.setItem('access_token', access)\n      localStorage.setItem('refresh_token', refresh)\n\n      // Fetch user profile\n      const profileResponse = await apiClient.get('/api/auth/profile/')\n      setUser(profileResponse.data)\n    } catch (error: any) {\n      console.error('Signup failed:', error)\n      throw error\n    }\n  }\n\n  const register = async (email: string, username: string, password: string, name: string, phone_number: string) => {\n    try {\n      const response = await apiClient.post('/api/auth/register/', {\n        email,\n        username,\n        password,\n        password_confirm: password,\n        name,\n        phone_number,\n      })\n      // Don't automatically log in - just register\n      console.log('Registration successful:', response.data)\n    } catch (error: any) {\n      console.error('Registration failed:', error)\n      throw error\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem('access_token')\n    localStorage.removeItem('refresh_token')\n    setUser(null)\n  }\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    signup,\n    register,\n    logout,\n    isAuthenticated,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}","size_bytes":3962},"Backend/accounts/migrations/0002_user_username.py":{"content":"# Generated by Django 5.0.2 on 2025-09-24 11:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='username',\n            field=models.CharField(blank=True, max_length=150, null=True, unique=True),\n        ),\n    ]\n","size_bytes":411},"Backend/lead_magnets/__init__.py":{"content":"","size_bytes":0},"Backend/lead_magnets/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"Backend/lead_magnets/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass LeadMagnetsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'lead_magnets'\n","size_bytes":155},"Backend/lead_magnets/migrations/0001_initial.py":{"content":"# Generated by Django 5.0.2 on 2025-09-24 09:56\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='LeadMagnet',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=255)),\n                ('description', models.TextField(blank=True)),\n                ('status', models.CharField(choices=[('draft', 'Draft'), ('in-progress', 'In Progress'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('pdf_file', models.FileField(blank=True, null=True, upload_to='lead_magnets/')),\n                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lead_magnets', to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Lead',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('email', models.EmailField(max_length=254)),\n                ('name', models.CharField(blank=True, max_length=255)),\n                ('company', models.CharField(blank=True, max_length=255)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('lead_magnet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leads', to='lead_magnets.leadmagnet')),\n            ],\n            options={\n                'ordering': ['-created_at'],\n                'unique_together': {('lead_magnet', 'email')},\n            },\n        ),\n        migrations.CreateModel(\n            name='Download',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('downloaded_at', models.DateTimeField(auto_now_add=True)),\n                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),\n                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='lead_magnets.lead')),\n                ('lead_magnet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='lead_magnets.leadmagnet')),\n            ],\n            options={\n                'ordering': ['-downloaded_at'],\n            },\n        ),\n    ]\n","size_bytes":2918},"Backend/lead_magnets/migrations/__init__.py":{"content":"","size_bytes":0},"Backend/lead_magnets/models.py":{"content":"from django.db import models\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\nclass FirmProfile(models.Model):\n    \"\"\"One-time firm profile/branding information (reusable)\"\"\"\n    \n    FIRM_SIZE_CHOICES = [\n        ('1-2', '1–2'),\n        ('3-5', '3–5'),\n        ('6-10', '6–10'),\n        ('11+', '11+'),\n    ]\n    \n    INDUSTRY_SPECIALTY_CHOICES = [\n        ('residential', 'Residential'),\n        ('commercial', 'Commercial'),\n        ('mixed_practice', 'Mixed Practice'),\n        ('sustainable_green', 'Sustainable/Green'),\n        ('educational_civic', 'Educational/Civic'),\n        ('hospitality', 'Hospitality'),\n        ('healthcare', 'Healthcare'),\n        ('interiors', 'Interiors'),\n        ('urban_design', 'Urban Design'),\n        ('other', 'Other'),\n    ]\n    \n    FONT_STYLE_CHOICES = [\n        ('modern_sans_serif', 'Modern Sans-Serif'),\n        ('classic_serif', 'Classic Serif'),\n        ('creative_display', 'Creative/Display'),\n        ('no_preference', 'No Preference'),\n    ]\n    \n    # Link to user\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='firm_profile')\n    \n    # Basic Information\n    firm_name = models.CharField(max_length=255)\n    work_email = models.EmailField()\n    phone_number = models.CharField(max_length=20, blank=True)\n    firm_website = models.URLField(blank=True)\n    firm_size = models.CharField(max_length=10, choices=FIRM_SIZE_CHOICES)\n    \n    # Industry (stored as comma-separated values for multi-select)\n    industry_specialty = models.TextField(help_text=\"Comma-separated industry specialties\")\n    \n    # Branding\n    logo = models.FileField(upload_to='firm_logos/', blank=True, null=True)\n    primary_brand_color = models.CharField(max_length=7, help_text=\"Hex color code\")\n    secondary_brand_color = models.CharField(max_length=7, blank=True, help_text=\"Hex color code\")\n    preferred_font_style = models.CharField(max_length=20, choices=FONT_STYLE_CHOICES)\n    additional_branding_guidelines = models.TextField(blank=True)\n    branding_file = models.FileField(upload_to='branding_files/', blank=True, null=True)\n    preferred_cover_image = models.FileField(upload_to='cover_images/', blank=True, null=True)\n    location_country = models.CharField(max_length=100)\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.firm_name} - {self.user.email}\"\n    \n    class Meta:\n        verbose_name = \"Firm Profile\"\n        verbose_name_plural = \"Firm Profiles\"\n\nclass LeadMagnetGeneration(models.Model):\n    \"\"\"Per-lead magnet PDF generation data (collected every time)\"\"\"\n    \n    LEAD_MAGNET_TYPE_CHOICES = [\n        ('guide', 'Guide'),\n        ('case_study', 'Case Study'),\n        ('checklist', 'Checklist'),\n        ('roi_calculator', 'ROI Calculator'),\n        ('trends_report', 'Trends Report'),\n        ('client_onboarding_flow', 'Client Onboarding Flow'),\n        ('design_portfolio', 'Design Portfolio'),\n        ('custom', 'Custom'),\n    ]\n    \n    MAIN_TOPIC_CHOICES = [\n        ('sustainable_architecture', 'Sustainable Architecture'),\n        ('smart_homes', 'Smart Homes'),\n        ('adaptive_reuse', 'Adaptive Reuse'),\n        ('wellness_biophilic', 'Wellness/Biophilic'),\n        ('modular_prefab', 'Modular/Prefab'),\n        ('urban_placemaking', 'Urban Placemaking'),\n        ('passive_house_net_zero', 'Passive House/Net-Zero'),\n        ('climate_resilient', 'Climate-Resilient'),\n        ('project_roi', 'Project ROI'),\n        ('branding_differentiation', 'Branding & Differentiation'),\n        ('custom', 'Custom'),\n    ]\n    \n    TARGET_AUDIENCE_CHOICES = [\n        ('homeowners', 'Homeowners'),\n        ('developers', 'Developers'),\n        ('commercial_clients', 'Commercial Clients'),\n        ('government', 'Government'),\n        ('architects_peers', 'Architects/Peers'),\n        ('contractors', 'Contractors'),\n        ('real_estate_agents', 'Real Estate Agents'),\n        ('nonprofits', 'Nonprofits'),\n        ('facility_managers', 'Facility Managers'),\n        ('other', 'Other'),\n    ]\n    \n    PAIN_POINTS_CHOICES = [\n        ('high_costs', 'High costs'),\n        ('roi_uncertainty', 'ROI uncertainty'),\n        ('compliance_issues', 'Compliance issues'),\n        ('sustainability_demands', 'Sustainability demands'),\n        ('risk_management', 'Risk management'),\n        ('long_timelines', 'Long timelines'),\n        ('tech_complexity', 'Tech complexity'),\n        ('poor_communication', 'Poor communication'),\n        ('competition', 'Competition'),\n        ('approvals', 'Approvals'),\n        ('energy_efficiency', 'Energy efficiency'),\n        ('health_wellness', 'Health/Wellness'),\n        ('vendor_reliability', 'Vendor reliability'),\n        ('other', 'Other'),\n    ]\n    \n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('in-progress', 'In Progress'),\n        ('generating', 'Generating'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),\n    ]\n    \n    # Link to user and firm profile\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='lead_magnet_generations')\n    firm_profile = models.ForeignKey(FirmProfile, on_delete=models.CASCADE, related_name='lead_magnets')\n    \n    # Lead Magnet Details\n    lead_magnet_type = models.CharField(max_length=30, choices=LEAD_MAGNET_TYPE_CHOICES)\n    main_topic = models.CharField(max_length=30, choices=MAIN_TOPIC_CHOICES)\n    custom_topic = models.CharField(max_length=255, blank=True, help_text=\"Used when main_topic is 'custom'\")\n    \n    # Audience (stored as comma-separated values for multi-select)\n    target_audience = models.TextField(help_text=\"Comma-separated target audiences\")\n    audience_pain_points = models.TextField(help_text=\"Comma-separated pain points\")\n    \n    # Content\n    desired_outcome = models.TextField(help_text=\"Short text describing desired outcome/solution\")\n    call_to_action = models.CharField(max_length=255, help_text=\"e.g. Schedule Consultation, Download Portfolio\")\n    special_requests = models.TextField(blank=True, help_text=\"Optional additional sections or requests\")\n    preferred_layout_template = models.CharField(max_length=100, blank=True, help_text=\"Future feature\")\n    \n    # Generation Status and Results\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')\n    generated_pdf = models.FileField(upload_to='generated_lead_magnets/', blank=True, null=True)\n    generation_error = models.TextField(blank=True, help_text=\"Error message if generation failed\")\n    \n    # Tracking\n    title = models.CharField(max_length=255, help_text=\"Auto-generated or user-provided title\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    completed_at = models.DateTimeField(blank=True, null=True)\n    \n    def __str__(self):\n        return f\"{self.title} - {self.user.email}\"\n    \n    class Meta:\n        ordering = ['-created_at']\n        verbose_name = \"Lead Magnet Generation\"\n        verbose_name_plural = \"Lead Magnet Generations\"\n\n# Keep existing models for backward compatibility\nclass LeadMagnet(models.Model):\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('in-progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('archived', 'Archived'),\n    ]\n    \n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')\n    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='lead_magnets')\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    # PDF file storage (for future implementation)\n    pdf_file = models.FileField(upload_to='lead_magnets/', blank=True, null=True)\n    \n    def __str__(self):\n        return str(self.title)\n    \n    class Meta:\n        ordering = ['-created_at']\n\nclass Lead(models.Model):\n    lead_magnet = models.ForeignKey(LeadMagnet, on_delete=models.CASCADE, related_name='leads')\n    email = models.EmailField()\n    name = models.CharField(max_length=255, blank=True)\n    company = models.CharField(max_length=255, blank=True)\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self):\n        return f\"{self.email} - {self.lead_magnet.title}\"\n    \n    class Meta:\n        ordering = ['-created_at']\n        unique_together = ['lead_magnet', 'email']\n\nclass Download(models.Model):\n    lead_magnet = models.ForeignKey(LeadMagnet, on_delete=models.CASCADE, related_name='downloads')\n    lead = models.ForeignKey(Lead, on_delete=models.CASCADE, related_name='downloads')\n    \n    downloaded_at = models.DateTimeField(auto_now_add=True)\n    ip_address = models.GenericIPAddressField(blank=True, null=True)\n    \n    def __str__(self):\n        return f\"Download: {self.lead_magnet.title} by {self.lead.email}\"\n    \n    class Meta:\n        ordering = ['-downloaded_at']\n","size_bytes":9060},"Backend/lead_magnets/serializers.py":{"content":"from rest_framework import serializers\nfrom .models import LeadMagnet, Lead, Download, FirmProfile, LeadMagnetGeneration\n\nclass LeadMagnetSerializer(serializers.ModelSerializer):\n    leads_count = serializers.SerializerMethodField()\n    downloads_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = LeadMagnet\n        fields = ['id', 'title', 'description', 'status', 'created_at', 'updated_at', 'leads_count', 'downloads_count']\n        read_only_fields = ['id', 'created_at', 'updated_at', 'leads_count', 'downloads_count']\n    \n    def get_leads_count(self, obj):\n        return obj.leads.count()\n    \n    def get_downloads_count(self, obj):\n        return obj.downloads.count()\n\nclass LeadSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Lead\n        fields = ['id', 'email', 'name', 'company', 'created_at']\n        read_only_fields = ['id', 'created_at']\n\nclass FirmProfileSerializer(serializers.ModelSerializer):\n    industry_specialty_list = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = FirmProfile\n        fields = [\n            'id', 'firm_name', 'work_email', 'phone_number', 'firm_website', \n            'firm_size', 'industry_specialty', 'industry_specialty_list',\n            'logo', 'primary_brand_color', 'secondary_brand_color', \n            'preferred_font_style', 'additional_branding_guidelines', \n            'branding_file', 'preferred_cover_image', 'location_country',\n            'created_at', 'updated_at'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at']\n    \n    def get_industry_specialty_list(self, obj):\n        \"\"\"Convert comma-separated string to list for frontend\"\"\"\n        if obj.industry_specialty:\n            return [item.strip() for item in obj.industry_specialty.split(',') if item.strip()]\n        return []\n    \n    def validate_industry_specialty(self, value):\n        \"\"\"Validate that industry specialties are from allowed choices\"\"\"\n        if value:\n            specialties = [item.strip() for item in value.split(',') if item.strip()]\n            valid_choices = [choice[0] for choice in FirmProfile.INDUSTRY_SPECIALTY_CHOICES]\n            for specialty in specialties:\n                if specialty not in valid_choices:\n                    raise serializers.ValidationError(f\"'{specialty}' is not a valid industry specialty.\")\n        return value\n\nclass LeadMagnetGenerationSerializer(serializers.ModelSerializer):\n    target_audience_list = serializers.SerializerMethodField()\n    audience_pain_points_list = serializers.SerializerMethodField()\n    firm_profile_data = FirmProfileSerializer(source='firm_profile', read_only=True)\n    \n    class Meta:\n        model = LeadMagnetGeneration\n        fields = [\n            'id', 'lead_magnet_type', 'main_topic', 'custom_topic',\n            'target_audience', 'target_audience_list', 'audience_pain_points', \n            'audience_pain_points_list', 'desired_outcome', 'call_to_action',\n            'special_requests', 'preferred_layout_template', 'status',\n            'generated_pdf', 'generation_error', 'title', 'firm_profile_data',\n            'created_at', 'updated_at', 'completed_at'\n        ]\n        read_only_fields = [\n            'id', 'generated_pdf', 'generation_error', 'created_at', \n            'updated_at', 'completed_at', 'firm_profile_data'\n        ]\n    \n    def get_target_audience_list(self, obj):\n        \"\"\"Convert comma-separated string to list for frontend\"\"\"\n        if obj.target_audience:\n            return [item.strip() for item in obj.target_audience.split(',') if item.strip()]\n        return []\n    \n    def get_audience_pain_points_list(self, obj):\n        \"\"\"Convert comma-separated string to list for frontend\"\"\"\n        if obj.audience_pain_points:\n            return [item.strip() for item in obj.audience_pain_points.split(',') if item.strip()]\n        return []\n    \n    def validate_target_audience(self, value):\n        \"\"\"Validate that target audiences are from allowed choices\"\"\"\n        if value:\n            audiences = [item.strip() for item in value.split(',') if item.strip()]\n            valid_choices = [choice[0] for choice in LeadMagnetGeneration.TARGET_AUDIENCE_CHOICES]\n            for audience in audiences:\n                if audience not in valid_choices:\n                    raise serializers.ValidationError(f\"'{audience}' is not a valid target audience.\")\n        return value\n    \n    def validate_audience_pain_points(self, value):\n        \"\"\"Validate that pain points are from allowed choices\"\"\"\n        if value:\n            pain_points = [item.strip() for item in value.split(',') if item.strip()]\n            valid_choices = [choice[0] for choice in LeadMagnetGeneration.PAIN_POINTS_CHOICES]\n            for pain_point in pain_points:\n                if pain_point not in valid_choices:\n                    raise serializers.ValidationError(f\"'{pain_point}' is not a valid pain point.\")\n        return value\n\nclass DashboardStatsSerializer(serializers.Serializer):\n    total_lead_magnets = serializers.IntegerField()\n    active_lead_magnets = serializers.IntegerField()\n    total_downloads = serializers.IntegerField()\n    leads_generated = serializers.IntegerField()","size_bytes":5237},"Backend/lead_magnets/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"Backend/lead_magnets/urls.py":{"content":"from django.urls import path\nfrom .views import (\n    DashboardStatsView, LeadMagnetListCreateView, LeadMagnetDetailView,\n    FirmProfileView, LeadMagnetGenerationListCreateView, LeadMagnetGenerationDetailView\n)\n\nurlpatterns = [\n    path('stats/', DashboardStatsView.as_view(), name='dashboard-stats'),\n    path('lead-magnets/', LeadMagnetListCreateView.as_view(), name='lead-magnet-list'),\n    path('lead-magnets/<int:pk>/', LeadMagnetDetailView.as_view(), name='lead-magnet-detail'),\n    \n    # New endpoints for lead magnet generation system\n    path('firm-profile/', FirmProfileView.as_view(), name='firm-profile'),\n    path('generations/', LeadMagnetGenerationListCreateView.as_view(), name='lead-magnet-generation-list'),\n    path('generations/<int:pk>/', LeadMagnetGenerationDetailView.as_view(), name='lead-magnet-generation-detail'),\n]","size_bytes":844},"Backend/lead_magnets/views.py":{"content":"from rest_framework import generics, permissions, status, serializers\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom django.db.models import Count, Q\nfrom .models import LeadMagnet, Lead, Download, FirmProfile, LeadMagnetGeneration\nfrom .serializers import (\n    LeadMagnetSerializer, LeadSerializer, DashboardStatsSerializer,\n    FirmProfileSerializer, LeadMagnetGenerationSerializer\n)\n\nclass DashboardStatsView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    \n    def get(self, request):\n        user = request.user\n        \n        # Get user's lead magnets\n        user_lead_magnets = LeadMagnet.objects.filter(owner=user)\n        \n        # Calculate stats\n        total_lead_magnets = user_lead_magnets.count()\n        active_lead_magnets = user_lead_magnets.filter(\n            Q(status='completed') | Q(status='in-progress')\n        ).count()\n        \n        # Get total downloads for user's lead magnets\n        total_downloads = Download.objects.filter(\n            lead_magnet__owner=user\n        ).count()\n        \n        # Get total leads generated for user's lead magnets\n        leads_generated = Lead.objects.filter(\n            lead_magnet__owner=user\n        ).count()\n        \n        stats = {\n            'total_lead_magnets': total_lead_magnets,\n            'active_lead_magnets': active_lead_magnets,\n            'total_downloads': total_downloads,\n            'leads_generated': leads_generated\n        }\n        \n        serializer = DashboardStatsSerializer(stats)\n        return Response(serializer.data)\n\nclass LeadMagnetListCreateView(generics.ListCreateAPIView):\n    serializer_class = LeadMagnetSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    \n    def get_queryset(self):\n        return LeadMagnet.objects.filter(owner=self.request.user)\n    \n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\n\nclass LeadMagnetDetailView(generics.RetrieveUpdateDestroyAPIView):\n    serializer_class = LeadMagnetSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    \n    def get_queryset(self):\n        return LeadMagnet.objects.filter(owner=self.request.user)\n\nclass FirmProfileView(APIView):\n    \"\"\"Get or create/update firm profile for the authenticated user\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    \n    def get(self, request):\n        try:\n            firm_profile = FirmProfile.objects.get(user=request.user)\n            serializer = FirmProfileSerializer(firm_profile)\n            return Response(serializer.data)\n        except FirmProfile.DoesNotExist:\n            return Response({'detail': 'Firm profile not found'}, status=status.HTTP_404_NOT_FOUND)\n    \n    def post(self, request):\n        # Create new firm profile\n        try:\n            existing_profile = FirmProfile.objects.get(user=request.user)\n            return Response(\n                {'detail': 'Firm profile already exists. Use PUT to update.'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n        except FirmProfile.DoesNotExist:\n            pass\n        \n        serializer = FirmProfileSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save(user=request.user)\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    \n    def put(self, request):\n        # Update existing firm profile\n        try:\n            firm_profile = FirmProfile.objects.get(user=request.user)\n        except FirmProfile.DoesNotExist:\n            return Response({'detail': 'Firm profile not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        serializer = FirmProfileSerializer(firm_profile, data=request.data, partial=True)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass LeadMagnetGenerationListCreateView(generics.ListCreateAPIView):\n    \"\"\"List user's lead magnet generations and create new ones\"\"\"\n    serializer_class = LeadMagnetGenerationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    \n    def get_queryset(self):\n        return LeadMagnetGeneration.objects.filter(user=self.request.user)\n    \n    def perform_create(self, serializer):\n        # Get or require firm profile\n        try:\n            firm_profile = FirmProfile.objects.get(user=self.request.user)\n        except FirmProfile.DoesNotExist:\n            raise serializers.ValidationError(\"Firm profile must be created before generating lead magnets\")\n        \n        # Auto-generate title if not provided\n        title = self.request.data.get('title')\n        if not title:\n            lead_magnet_type = self.request.data.get('lead_magnet_type', 'guide')\n            main_topic = self.request.data.get('main_topic', 'custom')\n            title = f\"{lead_magnet_type.replace('_', ' ').title()} - {main_topic.replace('_', ' ').title()}\"\n        \n        serializer.save(user=self.request.user, firm_profile=firm_profile, title=title)\n\nclass LeadMagnetGenerationDetailView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"Retrieve, update or delete a specific lead magnet generation\"\"\"\n    serializer_class = LeadMagnetGenerationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    \n    def get_queryset(self):\n        return LeadMagnetGeneration.objects.filter(user=self.request.user)\n","size_bytes":5546},"Backend/lead_magnets/migrations/0002_auto_20250924_1117.py":{"content":"# Generated by Django 5.0.2 on 2025-09-24 11:17\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('lead_magnets', '0001_initial'),\n    ]\n\n    operations = [\n    ]\n","size_bytes":219},"Frontend/src/components/LeadMagnetFormContent.css":{"content":"/* Lead Magnet Form Content - Dashboard Integration */\n.lead-magnet-form-content {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  color: #e2e8f0;\n  background: transparent;\n}\n\n.form-header {\n  margin-bottom: 2rem;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.header-actions h1 {\n  color: #f1f5f9;\n  font-size: 2rem;\n  font-weight: 600;\n  margin: 0;\n}\n\n.back-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  background: #1e293b;\n  border: 1px solid #334155;\n  border-radius: 0.5rem;\n  color: #e2e8f0;\n  text-decoration: none;\n  transition: all 0.2s;\n  cursor: pointer;\n  font-size: 0.875rem;\n}\n\n.back-button:hover {\n  background: #334155;\n  border-color: #475569;\n}\n\n/* Progress Bar - Thin Loading Bar with Dots */\n.progress-steps {\n  display: flex;\n  align-items: center;\n  padding: 2rem;\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n  border-radius: 1rem;\n  border: 1px solid #14b8a6;\n  margin-bottom: 2rem;\n  box-shadow: 0 4px 20px rgba(20, 184, 166, 0.1);\n}\n\n.progress-bar {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  position: relative;\n}\n\n.progress-line {\n  flex: 1;\n  height: 3px;\n  background: #334155;\n  border-radius: 2px;\n  position: relative;\n  margin: 0 1rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #14b8a6, #0d9488);\n  border-radius: 2px;\n  transition: width 0.6s ease;\n  position: relative;\n}\n\n.progress-dot {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #334155;\n  border: 2px solid #475569;\n  transition: all 0.4s ease;\n  position: relative;\n  z-index: 2;\n}\n\n.progress-dot.active {\n  background: linear-gradient(135deg, #14b8a6 0%, #0d9488 100%);\n  border-color: #14b8a6;\n  box-shadow: 0 0 12px rgba(20, 184, 166, 0.4);\n  transform: scale(1.2);\n}\n\n.progress-dot.completed {\n  background: linear-gradient(135deg, #059669 0%, #047857 100%);\n  border-color: #059669;\n  box-shadow: 0 0 8px rgba(5, 150, 105, 0.3);\n}\n\n.progress-step {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.75rem;\n  position: relative;\n  z-index: 2;\n}\n\n.step-info {\n  min-width: 0;\n  flex: 1;\n}\n\n.step-name {\n  font-weight: 600;\n  font-size: 0.875rem;\n  margin-bottom: 0.25rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.progress-step.active .step-name {\n  color: #14b8a6;\n  font-weight: 600;\n}\n\n.progress-step.completed .step-name {\n  color: #059669;\n}\n\n.step-description {\n  font-size: 0.75rem;\n  color: #94a3b8;\n  line-height: 1.3;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n/* Stage Content */\n.stage-content {\n  flex: 1;\n  overflow-y: auto;\n  padding-right: 0.5rem;\n  margin-bottom: 1.5rem;\n}\n\n.stage-form {\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n  border-radius: 1.5rem;\n  padding: 3rem;\n  border: 1px solid #14b8a6;\n  box-shadow: 0 8px 32px rgba(20, 184, 166, 0.1);\n  position: relative;\n  overflow: hidden;\n}\n\n.stage-form::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #14b8a6, #0d9488, #14b8a6);\n  background-size: 200% 100%;\n  animation: shimmer 3s infinite;\n}\n\n@keyframes shimmer {\n  0% { background-position: -200% 0; }\n  100% { background-position: 200% 0; }\n}\n\n.stage-form h2 {\n  color: #f1f5f9;\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  font-weight: 700;\n  background: linear-gradient(135deg, #14b8a6, #0d9488);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.form-description {\n  color: #cbd5e1;\n  margin-bottom: 3rem;\n  line-height: 1.6;\n  font-size: 1.1rem;\n}\n\n/* Form Layout */\n.form-grid {\n  display: grid;\n  gap: 2rem;\n}\n\n.form-section {\n  background: #0f172a;\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  border: 1px solid #334155;\n}\n\n.form-section h3 {\n  color: #f1f5f9;\n  font-size: 1.25rem;\n  margin-bottom: 0.5rem;\n}\n\n.field-description {\n  color: #94a3b8;\n  font-size: 0.875rem;\n  margin-bottom: 1rem;\n}\n\n/* Form Fields */\n.form-field {\n  margin-bottom: 1.5rem;\n}\n\n.form-field label {\n  display: block;\n  color: #e2e8f0;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n}\n\n.form-field input,\n.form-field select,\n.form-field textarea {\n  width: 100%;\n  padding: 0.75rem;\n  background: #1e293b;\n  border: 1px solid #334155;\n  border-radius: 0.5rem;\n  color: #e2e8f0;\n  font-size: 0.875rem;\n  transition: border-color 0.2s;\n}\n\n.form-field input:focus,\n.form-field select:focus,\n.form-field textarea:focus {\n  outline: none;\n  border-color: #14b8a6;\n  box-shadow: 0 0 0 3px rgba(20, 184, 166, 0.2);\n  background: #0f172a;\n}\n\n.form-field input::placeholder,\n.form-field textarea::placeholder {\n  color: #64748b;\n}\n\n.form-field small {\n  display: block;\n  color: #94a3b8;\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n/* Checkbox and Radio Grids */\n.checkbox-grid,\n.radio-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.checkbox-card,\n.radio-card {\n  display: block;\n  background: #1e293b;\n  border: 1px solid #334155;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.checkbox-card:hover,\n.radio-card:hover {\n  border-color: #14b8a6;\n  background: #1e293b;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(20, 184, 166, 0.1);\n}\n\n.checkbox-card input:checked + .checkbox-content,\n.radio-card input:checked + .radio-content {\n  color: #14b8a6;\n}\n\n.checkbox-card input:checked,\n.radio-card input:checked {\n  accent-color: #14b8a6;\n}\n\n.checkbox-card input,\n.radio-card input {\n  margin-bottom: 0.5rem;\n}\n\n.checkbox-title,\n.radio-title {\n  display: block;\n  font-weight: 500;\n  margin-bottom: 0.25rem;\n}\n\n.checkbox-description,\n.radio-description {\n  display: block;\n  font-size: 0.75rem;\n  color: #94a3b8;\n  line-height: 1.3;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.checkbox-label:hover {\n  background: #1e293b;\n}\n\n.checkbox-text {\n  font-size: 0.875rem;\n}\n\n/* Navigation */\n.stage-navigation {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n  padding-top: 1.5rem;\n  border-top: 1px solid #334155;\n}\n\n.nav-button-group {\n  display: flex;\n  gap: 1rem;\n}\n\n.nav-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 500;\n  text-decoration: none;\n  transition: all 0.2s;\n  cursor: pointer;\n  border: none;\n  font-size: 0.875rem;\n}\n\n.nav-button.primary {\n  background: linear-gradient(135deg, #14b8a6 0%, #0d9488 100%);\n  color: white;\n  box-shadow: 0 4px 15px rgba(20, 184, 166, 0.3);\n}\n\n.nav-button.primary:hover:not(:disabled) {\n  background: linear-gradient(135deg, #0d9488 0%, #0f766e 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(20, 184, 166, 0.4);\n}\n\n.nav-button.secondary {\n  background: #334155;\n  color: #e2e8f0;\n  border: 1px solid #475569;\n}\n\n.nav-button.secondary:hover:not(:disabled) {\n  background: #475569;\n}\n\n.nav-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.generate-button {\n  background: linear-gradient(135deg, #059669 0%, #047857 100%) !important;\n  box-shadow: 0 4px 15px rgba(5, 150, 105, 0.4) !important;\n}\n\n.generate-button:hover:not(:disabled) {\n  background: linear-gradient(135deg, #047857 0%, #065f46 100%) !important;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(5, 150, 105, 0.5) !important;\n}\n\n/* Error Message */\n.error-message {\n  background: #dc2626;\n  color: white;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n/* Field Help */\n.field-help {\n  margin-top: 0.5rem;\n  padding: 1rem;\n  background: #0f172a;\n  border-radius: 0.5rem;\n  border: 1px solid #334155;\n}\n\n.field-help strong {\n  color: #e2e8f0;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.field-help ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.field-help li {\n  color: #94a3b8;\n  font-size: 0.875rem;\n  margin-bottom: 0.25rem;\n  padding-left: 1rem;\n  position: relative;\n}\n\n.field-help li::before {\n  content: '•';\n  color: #14b8a6;\n  position: absolute;\n  left: 0;\n}\n\n/* CTA Suggestions */\n.cta-suggestions {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.suggestion-btn {\n  padding: 0.5rem 0.75rem;\n  background: #334155;\n  border: 1px solid #475569;\n  border-radius: 0.25rem;\n  color: #e2e8f0;\n  font-size: 0.75rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.suggestion-btn:hover {\n  background: #14b8a6;\n  border-color: #14b8a6;\n  transform: translateY(-1px);\n}\n\n/* Selection Summary */\n.selection-summary {\n  margin-top: 2rem;\n  padding: 1.5rem;\n  background: #0f172a;\n  border-radius: 0.75rem;\n  border: 1px solid #334155;\n}\n\n.selection-summary h4 {\n  color: #f1f5f9;\n  margin-bottom: 1rem;\n}\n\n.summary-section {\n  margin-bottom: 1rem;\n}\n\n.summary-section strong {\n  color: #e2e8f0;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.selected-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.selected-item {\n  padding: 0.25rem 0.5rem;\n  background: linear-gradient(135deg, #14b8a6, #0d9488);\n  color: white;\n  border-radius: 0.375rem;\n  font-size: 0.75rem;\n  box-shadow: 0 2px 8px rgba(20, 184, 166, 0.3);\n}\n\n/* Content Preview */\n.content-preview {\n  margin-top: 2rem;\n}\n\n.content-preview h4 {\n  color: #f1f5f9;\n  margin-bottom: 1rem;\n}\n\n.preview-card {\n  background: #0f172a;\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  border: 1px solid #334155;\n}\n\n.preview-section {\n  margin-bottom: 1rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #334155;\n}\n\n.preview-section:last-child {\n  margin-bottom: 0;\n  padding-bottom: 0;\n  border-bottom: none;\n}\n\n.preview-section strong {\n  color: #e2e8f0;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n/* Review Stage */\n.review-stage h3 {\n  color: #f1f5f9;\n  margin-bottom: 1.5rem;\n}\n\n.review-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n.review-section {\n  background: #0f172a;\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  border: 1px solid #334155;\n}\n\n.review-section h4 {\n  color: #14b8a6;\n  margin-bottom: 1rem;\n  font-size: 1.125rem;\n  font-weight: 600;\n}\n\n.review-section p {\n  margin-bottom: 0.5rem;\n  color: #e2e8f0;\n}\n\n.review-section strong {\n  color: #94a3b8;\n}\n\n/* Responsive Design */\n@media (max-width: 1024px) {\n  .progress-steps {\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .progress-step:not(:last-child)::after {\n    display: none;\n  }\n\n  .form-row {\n    grid-template-columns: 1fr;\n  }\n\n  .checkbox-grid,\n  .radio-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .review-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .stage-navigation {\n    flex-direction: column;\n  }\n\n  .nav-button-group {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n@media (max-width: 768px) {\n  .header-actions {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .stage-content {\n    padding-right: 0;\n  }\n\n  .stage-form {\n    padding: 1.5rem;\n  }\n}","size_bytes":11235},"Frontend/src/components/LeadMagnetFormContent.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowLeft, ArrowRight, FileText, Building, Target, Users, Zap } from 'lucide-react';\nimport { \n  getFirmProfile, \n  createFirmProfile,\n  createLeadMagnetGeneration\n} from '../lib/leadMagnetApi';\nimport type { FirmProfile, LeadMagnetGeneration } from '../lib/leadMagnetApi';\nimport FirmProfileForm from './forms/FirmProfileForm';\nimport LeadMagnetBasicsForm from './forms/LeadMagnetBasicsForm';\nimport AudienceForm from './forms/AudienceForm';\nimport ContentForm from './forms/ContentForm';\nimport './LeadMagnetFormContent.css';\n\nconst STAGES = [\n  { id: 'firm-profile', name: 'Firm Profile', icon: Building, description: 'Set up your company information' },\n  { id: 'basics', name: 'Lead Magnet Basics', icon: FileText, description: 'Choose type and topic' },\n  { id: 'audience', name: 'Target Audience', icon: Users, description: 'Define your audience' },\n  { id: 'content', name: 'Content & Goals', icon: Target, description: 'Set goals and call-to-action' },\n  { id: 'review', name: 'Review & Generate', icon: Zap, description: 'Review and create your lead magnet' },\n];\n\ninterface LeadMagnetFormContentProps {\n  onClose: () => void;\n  onSuccess: (message: string) => void;\n}\n\nconst LeadMagnetFormContent: React.FC<LeadMagnetFormContentProps> = ({ onClose, onSuccess }) => {\n  const [currentStage, setCurrentStage] = useState(0);\n  const [firmProfile, setFirmProfile] = useState<Partial<FirmProfile>>({});\n  const [leadMagnetData, setLeadMagnetData] = useState<Partial<LeadMagnetGeneration>>({});\n  const [hasExistingProfile, setHasExistingProfile] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    // Check if user has existing firm profile\n    const checkFirmProfile = async () => {\n      try {\n        const profile = await getFirmProfile();\n        setFirmProfile(profile);\n        setHasExistingProfile(true);\n        // Skip to lead magnet basics if profile exists\n        setCurrentStage(1);\n      } catch (err) {\n        // No existing profile, start from beginning\n        setHasExistingProfile(false);\n        setCurrentStage(0);\n      }\n    };\n\n    checkFirmProfile();\n  }, []);\n\n  const handleNext = async () => {\n    setError('');\n\n    // Validate current stage before proceeding\n    if (!canProceed()) {\n      setError('Please fill in all required fields before continuing.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      if (currentStage === 0 && !hasExistingProfile) {\n        // Save firm profile\n        await createFirmProfile(firmProfile);\n        setHasExistingProfile(true);\n      }\n\n      if (currentStage < STAGES.length - 1) {\n        setCurrentStage(currentStage + 1);\n      }\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to save data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStageComplete = async () => {\n    if (currentStage === 0 && !hasExistingProfile) {\n      try {\n        setLoading(true);\n        await createFirmProfile(firmProfile);\n        setHasExistingProfile(true);\n      } catch (err: any) {\n        setError(err.response?.data?.detail || 'Failed to save firm profile. Please try again.');\n        return;\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    if (currentStage < STAGES.length - 1) {\n      setCurrentStage(currentStage + 1);\n    } else {\n      await handleGenerate();\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStage > 0) {\n      setCurrentStage(currentStage - 1);\n    }\n  };\n\n  const handleGenerate = async () => {\n    setError('');\n    setLoading(true);\n\n    try {\n      // Create the lead magnet generation\n      const result = await createLeadMagnetGeneration(leadMagnetData);\n      \n      // Call success callback with message\n      onSuccess(`Lead magnet \"${result.title}\" has been created successfully!`);\n      onClose();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to generate lead magnet. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateFirmProfileData = (data: Partial<FirmProfile>) => {\n    setFirmProfile({ ...firmProfile, ...data });\n  };\n\n  const updateLeadMagnetData = (data: Partial<LeadMagnetGeneration>) => {\n    setLeadMagnetData({ ...leadMagnetData, ...data });\n  };\n\n  const isLastStage = currentStage === STAGES.length - 1;\n  const canProceed = () => {\n    switch (currentStage) {\n      case 0: // Firm profile\n        return firmProfile.firm_name && firmProfile.work_email && firmProfile.firm_size && \n               firmProfile.primary_brand_color && firmProfile.location_country;\n      case 1: // Basics\n        return leadMagnetData.lead_magnet_type && leadMagnetData.main_topic;\n      case 2: // Audience\n        return leadMagnetData.target_audience_list?.length && leadMagnetData.audience_pain_points_list?.length;\n      case 3: // Content\n        return leadMagnetData.desired_outcome && leadMagnetData.call_to_action;\n      case 4: // Review\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 0:\n        return (\n          <FirmProfileForm\n            data={firmProfile}\n            onChange={updateFirmProfileData}\n            isExisting={hasExistingProfile}\n            onComplete={handleStageComplete}\n          />\n        );\n      case 1:\n        return (\n          <LeadMagnetBasicsForm\n            data={leadMagnetData}\n            onChange={updateLeadMagnetData}\n          />\n        );\n      case 2:\n        return (\n          <AudienceForm\n            data={leadMagnetData}\n            onChange={updateLeadMagnetData}\n          />\n        );\n      case 3:\n        return (\n          <ContentForm\n            data={leadMagnetData}\n            onChange={updateLeadMagnetData}\n          />\n        );\n      case 4:\n        return (\n          <div className=\"review-stage\">\n            <h3>Review Your Lead Magnet</h3>\n            <div className=\"review-grid\">\n              <div className=\"review-section\">\n                <h4>Firm Profile</h4>\n                <p><strong>Company:</strong> {firmProfile.firm_name}</p>\n                <p><strong>Email:</strong> {firmProfile.work_email}</p>\n                <p><strong>Size:</strong> {firmProfile.firm_size}</p>\n              </div>\n              <div className=\"review-section\">\n                <h4>Lead Magnet Details</h4>\n                <p><strong>Type:</strong> {leadMagnetData.lead_magnet_type?.replace('_', ' ')}</p>\n                <p><strong>Topic:</strong> {leadMagnetData.main_topic?.replace('_', ' ')}</p>\n                <p><strong>Audience:</strong> {leadMagnetData.target_audience_list?.join(', ')}</p>\n              </div>\n              <div className=\"review-section\">\n                <h4>Content</h4>\n                <p><strong>Goal:</strong> {leadMagnetData.desired_outcome}</p>\n                <p><strong>Call to Action:</strong> {leadMagnetData.call_to_action}</p>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"lead-magnet-form-content\">\n      <div className=\"form-header\">\n        <div className=\"header-actions\">\n          <button onClick={onClose} className=\"back-button\">\n            <ArrowLeft size={20} />\n            Back to Dashboard\n          </button>\n          <h1>Create Lead Magnet</h1>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"progress-steps\">\n          <div className=\"progress-bar\">\n            {STAGES.map((stage, index) => {\n              const isActive = index === currentStage;\n              const isCompleted = index < currentStage;\n              const isLast = index === STAGES.length - 1;\n              \n              return (\n                <React.Fragment key={stage.id}>\n                  {/* Progress Dot */}\n                  <div className=\"progress-step\">\n                    <div className={`progress-dot ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}`} />\n                    <div className=\"step-info\">\n                      <div className=\"step-name\">{stage.name}</div>\n                    </div>\n                  </div>\n                  \n                  {/* Progress Line between dots */}\n                  {!isLast && (\n                    <div className=\"progress-line\">\n                      <div \n                        className=\"progress-fill\" \n                        style={{ \n                          width: isCompleted ? '100%' : '0%' \n                        }} \n                      />\n                    </div>\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Stage Content */}\n      <div className=\"stage-content\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentStage}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n            className=\"stage-form\"\n          >\n            {renderStageContent()}\n          </motion.div>\n        </AnimatePresence>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      {/* Navigation Buttons - Only show for non-firm profile stages */}\n      {currentStage > 0 && (\n        <div className=\"stage-navigation\">\n          <button \n            onClick={handleBack}\n            disabled={currentStage === 0 || loading}\n            className=\"nav-button secondary\"\n          >\n            <ArrowLeft size={18} />\n            Back\n          </button>\n\n          <div className=\"nav-button-group\">\n            {isLastStage ? (\n              <button \n                onClick={handleGenerate}\n                disabled={!canProceed() || loading}\n                className=\"nav-button primary generate-button\"\n              >\n                {loading ? 'Generating...' : 'Generate Lead Magnet'}\n                <Zap size={18} />\n              </button>\n            ) : (\n              <button \n                onClick={handleNext}\n                disabled={!canProceed() || loading}\n                className=\"nav-button primary\"\n              >\n                {loading ? 'Saving...' : 'Next'}\n                <ArrowRight size={18} />\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LeadMagnetFormContent;","size_bytes":10718},"Frontend/src/components/LeadMagnetGenerator.css":{"content":"/* Lead Magnet Generator Styles */\n.lead-magnet-generator {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #e2e8f0;\n  background: #0f172a;\n  min-height: 100vh;\n}\n\n.generator-header {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.generator-header h1 {\n  color: #f1f5f9;\n  font-size: 2rem;\n  font-weight: 600;\n}\n\n.back-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  background: #1e293b;\n  border: 1px solid #334155;\n  border-radius: 0.5rem;\n  color: #e2e8f0;\n  text-decoration: none;\n  transition: all 0.2s;\n}\n\n.back-button:hover {\n  background: #334155;\n  border-color: #475569;\n}\n\n/* Progress Steps */\n.progress-steps {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n  padding: 0 1rem;\n}\n\n.progress-step {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  flex: 1;\n  position: relative;\n}\n\n.progress-step:not(:last-child)::after {\n  content: '';\n  position: absolute;\n  top: 1.5rem;\n  left: 60%;\n  right: -40%;\n  height: 2px;\n  background: #334155;\n  z-index: 1;\n}\n\n.progress-step.completed:not(:last-child)::after {\n  background: #059669;\n}\n\n.step-icon {\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  background: #1e293b;\n  border: 2px solid #334155;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 0.5rem;\n  z-index: 2;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.progress-step.active .step-icon {\n  background: #3b82f6;\n  border-color: #3b82f6;\n  color: white;\n}\n\n.progress-step.completed .step-icon {\n  background: #059669;\n  border-color: #059669;\n  color: white;\n}\n\n.step-info {\n  max-width: 120px;\n}\n\n.step-name {\n  font-weight: 600;\n  font-size: 0.875rem;\n  margin-bottom: 0.25rem;\n}\n\n.progress-step.active .step-name {\n  color: #3b82f6;\n}\n\n.progress-step.completed .step-name {\n  color: #059669;\n}\n\n.step-description {\n  font-size: 0.75rem;\n  color: #94a3b8;\n  line-height: 1.3;\n}\n\n/* Stage Content */\n.stage-content {\n  background: #1e293b;\n  border-radius: 1rem;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  border: 1px solid #334155;\n}\n\n.stage-form h2 {\n  color: #f1f5f9;\n  font-size: 1.5rem;\n  margin-bottom: 0.5rem;\n}\n\n.form-description {\n  color: #94a3b8;\n  margin-bottom: 2rem;\n  line-height: 1.6;\n}\n\n/* Form Layout */\n.form-grid {\n  display: grid;\n  gap: 2rem;\n}\n\n.form-section {\n  background: #0f172a;\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  border: 1px solid #334155;\n}\n\n.form-section h3 {\n  color: #f1f5f9;\n  font-size: 1.25rem;\n  margin-bottom: 0.5rem;\n}\n\n.field-description {\n  color: #94a3b8;\n  font-size: 0.875rem;\n  margin-bottom: 1rem;\n}\n\n/* Form Fields */\n.form-field {\n  margin-bottom: 1.5rem;\n}\n\n.form-field label {\n  display: block;\n  color: #e2e8f0;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n}\n\n.form-field input,\n.form-field select,\n.form-field textarea {\n  width: 100%;\n  padding: 0.75rem;\n  background: #1e293b;\n  border: 1px solid #334155;\n  border-radius: 0.5rem;\n  color: #e2e8f0;\n  font-size: 0.875rem;\n  transition: border-color 0.2s;\n}\n\n.form-field input:focus,\n.form-field select:focus,\n.form-field textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.form-field input::placeholder,\n.form-field textarea::placeholder {\n  color: #64748b;\n}\n\n.form-field small {\n  display: block;\n  color: #94a3b8;\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n/* Checkbox and Radio Grids */\n.checkbox-grid,\n.radio-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.checkbox-card,\n.radio-card {\n  display: block;\n  background: #1e293b;\n  border: 1px solid #334155;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.checkbox-card:hover,\n.radio-card:hover {\n  border-color: #3b82f6;\n  background: #1e293b;\n}\n\n.checkbox-card input:checked + .checkbox-content,\n.radio-card input:checked + .radio-content {\n  color: #3b82f6;\n}\n\n.checkbox-card input,\n.radio-card input {\n  margin-bottom: 0.5rem;\n}\n\n.checkbox-title,\n.radio-title {\n  display: block;\n  font-weight: 500;\n  margin-bottom: 0.25rem;\n}\n\n.checkbox-description,\n.radio-description {\n  display: block;\n  font-size: 0.75rem;\n  color: #94a3b8;\n  line-height: 1.3;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.checkbox-label:hover {\n  background: #1e293b;\n}\n\n.checkbox-text {\n  font-size: 0.875rem;\n}\n\n/* Field Help */\n.field-help {\n  margin-top: 0.5rem;\n  padding: 1rem;\n  background: #0f172a;\n  border-radius: 0.5rem;\n  border: 1px solid #334155;\n}\n\n.field-help strong {\n  color: #e2e8f0;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.field-help ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.field-help li {\n  color: #94a3b8;\n  font-size: 0.875rem;\n  margin-bottom: 0.25rem;\n  padding-left: 1rem;\n  position: relative;\n}\n\n.field-help li::before {\n  content: '•';\n  color: #3b82f6;\n  position: absolute;\n  left: 0;\n}\n\n/* CTA Suggestions */\n.cta-suggestions {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.suggestion-btn {\n  padding: 0.5rem 0.75rem;\n  background: #334155;\n  border: 1px solid #475569;\n  border-radius: 0.25rem;\n  color: #e2e8f0;\n  font-size: 0.75rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.suggestion-btn:hover {\n  background: #3b82f6;\n  border-color: #3b82f6;\n}\n\n/* Selection Summary */\n.selection-summary {\n  margin-top: 2rem;\n  padding: 1.5rem;\n  background: #0f172a;\n  border-radius: 0.75rem;\n  border: 1px solid #334155;\n}\n\n.selection-summary h4 {\n  color: #f1f5f9;\n  margin-bottom: 1rem;\n}\n\n.summary-section {\n  margin-bottom: 1rem;\n}\n\n.summary-section strong {\n  color: #e2e8f0;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n.selected-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.selected-item {\n  padding: 0.25rem 0.5rem;\n  background: #3b82f6;\n  color: white;\n  border-radius: 0.25rem;\n  font-size: 0.75rem;\n}\n\n/* Content Preview */\n.content-preview {\n  margin-top: 2rem;\n}\n\n.content-preview h4 {\n  color: #f1f5f9;\n  margin-bottom: 1rem;\n}\n\n.preview-card {\n  background: #0f172a;\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  border: 1px solid #334155;\n}\n\n.preview-section {\n  margin-bottom: 1rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #334155;\n}\n\n.preview-section:last-child {\n  margin-bottom: 0;\n  padding-bottom: 0;\n  border-bottom: none;\n}\n\n.preview-section strong {\n  color: #e2e8f0;\n  display: block;\n  margin-bottom: 0.5rem;\n}\n\n/* Review Stage */\n.review-stage h3 {\n  color: #f1f5f9;\n  margin-bottom: 1.5rem;\n}\n\n.review-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n.review-section {\n  background: #0f172a;\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  border: 1px solid #334155;\n}\n\n.review-section h4 {\n  color: #3b82f6;\n  margin-bottom: 1rem;\n  font-size: 1.125rem;\n}\n\n.review-section p {\n  margin-bottom: 0.5rem;\n  color: #e2e8f0;\n}\n\n.review-section strong {\n  color: #94a3b8;\n}\n\n/* Navigation */\n.stage-navigation {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n\n.nav-button-group {\n  display: flex;\n  gap: 1rem;\n}\n\n.nav-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 500;\n  text-decoration: none;\n  transition: all 0.2s;\n  cursor: pointer;\n  border: none;\n  font-size: 0.875rem;\n}\n\n.nav-button.primary {\n  background: #3b82f6;\n  color: white;\n}\n\n.nav-button.primary:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.nav-button.secondary {\n  background: #334155;\n  color: #e2e8f0;\n  border: 1px solid #475569;\n}\n\n.nav-button.secondary:hover:not(:disabled) {\n  background: #475569;\n}\n\n.nav-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.generate-button {\n  background: #059669 !important;\n}\n\n.generate-button:hover:not(:disabled) {\n  background: #047857 !important;\n}\n\n/* Error Message */\n.error-message {\n  background: #dc2626;\n  color: white;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .lead-magnet-generator {\n    padding: 1rem;\n  }\n\n  .progress-steps {\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .progress-step:not(:last-child)::after {\n    display: none;\n  }\n\n  .form-row {\n    grid-template-columns: 1fr;\n  }\n\n  .checkbox-grid,\n  .radio-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .review-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .stage-navigation {\n    flex-direction: column;\n  }\n\n  .nav-button-group {\n    width: 100%;\n    justify-content: center;\n  }\n}","size_bytes":8857},"Frontend/src/components/LeadMagnetGenerator.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowLeft, ArrowRight, Check, FileText, Building, Target, Users, Zap } from 'lucide-react';\nimport { \n  getFirmProfile, \n  createFirmProfile,\n  createLeadMagnetGeneration\n} from '../lib/leadMagnetApi';\nimport type { FirmProfile, LeadMagnetGeneration } from '../lib/leadMagnetApi';\nimport FirmProfileForm from './forms/FirmProfileForm';\nimport LeadMagnetBasicsForm from './forms/LeadMagnetBasicsForm';\nimport AudienceForm from './forms/AudienceForm';\nimport ContentForm from './forms/ContentForm';\nimport './LeadMagnetGenerator.css';\n\nconst STAGES = [\n  { id: 'firm-profile', name: 'Firm Profile', icon: Building, description: 'Set up your company information' },\n  { id: 'basics', name: 'Lead Magnet Basics', icon: FileText, description: 'Choose type and topic' },\n  { id: 'audience', name: 'Target Audience', icon: Users, description: 'Define your audience' },\n  { id: 'content', name: 'Content & Goals', icon: Target, description: 'Set goals and call-to-action' },\n  { id: 'review', name: 'Review & Generate', icon: Zap, description: 'Review and create your lead magnet' },\n];\n\nconst LeadMagnetGenerator: React.FC = () => {\n  const navigate = useNavigate();\n  const [currentStage, setCurrentStage] = useState(0);\n  const [firmProfile, setFirmProfile] = useState<Partial<FirmProfile>>({});\n  const [leadMagnetData, setLeadMagnetData] = useState<Partial<LeadMagnetGeneration>>({});\n  const [hasExistingProfile, setHasExistingProfile] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    // Check if user has existing firm profile\n    const checkFirmProfile = async () => {\n      try {\n        const profile = await getFirmProfile();\n        setFirmProfile(profile);\n        setHasExistingProfile(true);\n        // Skip to lead magnet basics if profile exists\n        setCurrentStage(1);\n      } catch (err) {\n        // No existing profile, start from beginning\n        setHasExistingProfile(false);\n        setCurrentStage(0);\n      }\n    };\n\n    checkFirmProfile();\n  }, []);\n\n  const handleNext = async () => {\n    setError('');\n\n    // Validate current stage before proceeding\n    if (!canProceed()) {\n      setError('Please fill in all required fields before continuing.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      if (currentStage === 0 && !hasExistingProfile) {\n        // Save firm profile\n        await createFirmProfile(firmProfile);\n        setHasExistingProfile(true);\n      }\n\n      if (currentStage < STAGES.length - 1) {\n        setCurrentStage(currentStage + 1);\n      }\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to save data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStage > 0) {\n      setCurrentStage(currentStage - 1);\n    }\n  };\n\n  const handleGenerate = async () => {\n    setError('');\n    setLoading(true);\n\n    try {\n      // Create the lead magnet generation\n      const result = await createLeadMagnetGeneration(leadMagnetData);\n      \n      // Navigate to a success page or back to dashboard\n      navigate('/dashboard', { \n        state: { \n          message: `Lead magnet \"${result.title}\" has been created successfully!`,\n          type: 'success'\n        }\n      });\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to generate lead magnet. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateFirmProfileData = (data: Partial<FirmProfile>) => {\n    setFirmProfile({ ...firmProfile, ...data });\n  };\n\n  const updateLeadMagnetData = (data: Partial<LeadMagnetGeneration>) => {\n    setLeadMagnetData({ ...leadMagnetData, ...data });\n  };\n\n  const isLastStage = currentStage === STAGES.length - 1;\n  const canProceed = () => {\n    switch (currentStage) {\n      case 0: // Firm profile\n        return firmProfile.firm_name && firmProfile.work_email && firmProfile.firm_size && \n               firmProfile.primary_brand_color && firmProfile.location_country;\n      case 1: // Basics\n        return leadMagnetData.lead_magnet_type && leadMagnetData.main_topic;\n      case 2: // Audience\n        return leadMagnetData.target_audience_list?.length && leadMagnetData.audience_pain_points_list?.length;\n      case 3: // Content\n        return leadMagnetData.desired_outcome && leadMagnetData.call_to_action;\n      case 4: // Review\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 0:\n        return (\n          <FirmProfileForm\n            data={firmProfile}\n            onChange={updateFirmProfileData}\n            isExisting={hasExistingProfile}\n          />\n        );\n      case 1:\n        return (\n          <LeadMagnetBasicsForm\n            data={leadMagnetData}\n            onChange={updateLeadMagnetData}\n          />\n        );\n      case 2:\n        return (\n          <AudienceForm\n            data={leadMagnetData}\n            onChange={updateLeadMagnetData}\n          />\n        );\n      case 3:\n        return (\n          <ContentForm\n            data={leadMagnetData}\n            onChange={updateLeadMagnetData}\n          />\n        );\n      case 4:\n        return (\n          <div className=\"review-stage\">\n            <h3>Review Your Lead Magnet</h3>\n            <div className=\"review-grid\">\n              <div className=\"review-section\">\n                <h4>Firm Profile</h4>\n                <p><strong>Company:</strong> {firmProfile.firm_name}</p>\n                <p><strong>Email:</strong> {firmProfile.work_email}</p>\n                <p><strong>Size:</strong> {firmProfile.firm_size}</p>\n              </div>\n              <div className=\"review-section\">\n                <h4>Lead Magnet Details</h4>\n                <p><strong>Type:</strong> {leadMagnetData.lead_magnet_type?.replace('_', ' ')}</p>\n                <p><strong>Topic:</strong> {leadMagnetData.main_topic?.replace('_', ' ')}</p>\n                <p><strong>Audience:</strong> {leadMagnetData.target_audience_list?.join(', ')}</p>\n              </div>\n              <div className=\"review-section\">\n                <h4>Content</h4>\n                <p><strong>Goal:</strong> {leadMagnetData.desired_outcome}</p>\n                <p><strong>Call to Action:</strong> {leadMagnetData.call_to_action}</p>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"lead-magnet-generator\">\n      <div className=\"generator-header\">\n        <button onClick={() => navigate('/dashboard')} className=\"back-button\">\n          <ArrowLeft size={20} />\n          Back to Dashboard\n        </button>\n        <h1>Create Lead Magnet</h1>\n      </div>\n\n      {/* Progress Steps */}\n      <div className=\"progress-steps\">\n        {STAGES.map((stage, index) => {\n          const Icon = stage.icon;\n          const isActive = index === currentStage;\n          const isCompleted = index < currentStage;\n          \n          return (\n            <div \n              key={stage.id} \n              className={`progress-step ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}`}\n            >\n              <div className=\"step-icon\">\n                {isCompleted ? <Check size={20} /> : <Icon size={20} />}\n              </div>\n              <div className=\"step-info\">\n                <div className=\"step-name\">{stage.name}</div>\n                <div className=\"step-description\">{stage.description}</div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Stage Content */}\n      <div className=\"stage-content\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentStage}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n            className=\"stage-form\"\n          >\n            {renderStageContent()}\n          </motion.div>\n        </AnimatePresence>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      {/* Navigation Buttons */}\n      <div className=\"stage-navigation\">\n        <button \n          onClick={handleBack}\n          disabled={currentStage === 0 || loading}\n          className=\"nav-button secondary\"\n        >\n          <ArrowLeft size={20} />\n          Back\n        </button>\n\n        <div className=\"nav-button-group\">\n          {isLastStage ? (\n            <button \n              onClick={handleGenerate}\n              disabled={!canProceed() || loading}\n              className=\"nav-button primary generate-button\"\n            >\n              {loading ? 'Generating...' : 'Generate Lead Magnet'}\n              <Zap size={20} />\n            </button>\n          ) : (\n            <button \n              onClick={handleNext}\n              disabled={!canProceed() || loading}\n              className=\"nav-button primary\"\n            >\n              {loading ? 'Saving...' : 'Next'}\n              <ArrowRight size={20} />\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LeadMagnetGenerator;","size_bytes":9470},"Frontend/src/components/forms/AudienceForm.tsx":{"content":"import React from 'react';\nimport type { LeadMagnetGeneration } from '../../lib/leadMagnetApi';\nimport { TARGET_AUDIENCE_CHOICES, PAIN_POINTS_CHOICES } from '../../lib/leadMagnetApi';\n\ninterface AudienceFormProps {\n  data: Partial<LeadMagnetGeneration>;\n  onChange: (data: Partial<LeadMagnetGeneration>) => void;\n}\n\nconst AudienceForm: React.FC<AudienceFormProps> = ({ data, onChange }) => {\n  const handleAudienceChange = (audience: string, checked: boolean) => {\n    const currentAudiences = data.target_audience_list || [];\n    const updatedAudiences = checked\n      ? [...currentAudiences, audience]\n      : currentAudiences.filter(a => a !== audience);\n    \n    onChange({ \n      target_audience_list: updatedAudiences,\n      target_audience: updatedAudiences.join(',')\n    });\n  };\n\n  const handlePainPointChange = (painPoint: string, checked: boolean) => {\n    const currentPainPoints = data.audience_pain_points_list || [];\n    const updatedPainPoints = checked\n      ? [...currentPainPoints, painPoint]\n      : currentPainPoints.filter(p => p !== painPoint);\n    \n    onChange({ \n      audience_pain_points_list: updatedPainPoints,\n      audience_pain_points: updatedPainPoints.join(',')\n    });\n  };\n\n  return (\n    <div className=\"audience-form\">\n      <h2>Target Audience</h2>\n      <p className=\"form-description\">\n        Define who you want to reach with this lead magnet and what challenges they face.\n      </p>\n\n      <div className=\"form-grid\">\n        <div className=\"form-section\">\n          <h3>Target Audience</h3>\n          <p className=\"field-description\">Who is this lead magnet designed for? (Select all that apply)</p>\n          \n          <div className=\"checkbox-grid\">\n            {TARGET_AUDIENCE_CHOICES.map(choice => (\n              <label key={choice.value} className=\"checkbox-card\">\n                <input\n                  type=\"checkbox\"\n                  checked={data.target_audience_list?.includes(choice.value) || false}\n                  onChange={(e) => handleAudienceChange(choice.value, e.target.checked)}\n                />\n                <div className=\"checkbox-content\">\n                  <span className=\"checkbox-title\">{choice.label}</span>\n                  <span className=\"checkbox-description\">\n                    {getAudienceDescription(choice.value)}\n                  </span>\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Audience Pain Points & Challenges</h3>\n          <p className=\"field-description\">What problems does your audience face? (Select all that apply)</p>\n          \n          <div className=\"checkbox-grid\">\n            {PAIN_POINTS_CHOICES.map(choice => (\n              <label key={choice.value} className=\"checkbox-card\">\n                <input\n                  type=\"checkbox\"\n                  checked={data.audience_pain_points_list?.includes(choice.value) || false}\n                  onChange={(e) => handlePainPointChange(choice.value, e.target.checked)}\n                />\n                <div className=\"checkbox-content\">\n                  <span className=\"checkbox-title\">{choice.label}</span>\n                  <span className=\"checkbox-description\">\n                    {getPainPointDescription(choice.value)}\n                  </span>\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nconst getAudienceDescription = (audience: string): string => {\n  const descriptions: Record<string, string> = {\n    'homeowners': 'Residential property owners planning projects',\n    'developers': 'Real estate developers and project managers',\n    'commercial_clients': 'Business owners needing commercial spaces',\n    'government': 'Public sector and municipal projects',\n    'architects_peers': 'Fellow architects and design professionals',\n    'contractors': 'Construction contractors and builders',\n    'real_estate_agents': 'Real estate professionals and brokers',\n    'nonprofits': 'Non-profit organizations and foundations',\n    'facility_managers': 'Property and facility management professionals',\n    'other': 'Other professionals in your network',\n  };\n  return descriptions[audience] || '';\n};\n\nconst getPainPointDescription = (painPoint: string): string => {\n  const descriptions: Record<string, string> = {\n    'high_costs': 'Budget constraints and cost overruns',\n    'roi_uncertainty': 'Unclear return on investment',\n    'compliance_issues': 'Building codes and regulations',\n    'sustainability_demands': 'Environmental requirements and goals',\n    'risk_management': 'Project risks and liability concerns',\n    'long_timelines': 'Extended project schedules',\n    'tech_complexity': 'Complex building systems and technology',\n    'poor_communication': 'Coordination and communication challenges',\n    'competition': 'Competitive market pressures',\n    'approvals': 'Permitting and approval processes',\n    'energy_efficiency': 'Energy performance requirements',\n    'health_wellness': 'Occupant health and wellness concerns',\n    'vendor_reliability': 'Contractor and supplier reliability',\n    'other': 'Other specific challenges they face',\n  };\n  return descriptions[painPoint] || '';\n};\n\nexport default AudienceForm;","size_bytes":5297},"Frontend/src/components/forms/ContentForm.tsx":{"content":"import React from 'react';\nimport type { LeadMagnetGeneration } from '../../lib/leadMagnetApi';\n\ninterface ContentFormProps {\n  data: Partial<LeadMagnetGeneration>;\n  onChange: (data: Partial<LeadMagnetGeneration>) => void;\n}\n\nconst ContentForm: React.FC<ContentFormProps> = ({ data, onChange }) => {\n  const handleInputChange = (field: keyof LeadMagnetGeneration, value: any) => {\n    onChange({ [field]: value });\n  };\n\n  return (\n    <div className=\"content-form\">\n      <h2>Content & Goals</h2>\n      <p className=\"form-description\">\n        Define what your lead magnet will achieve and how you want people to engage with your firm.\n      </p>\n\n      <div className=\"form-grid\">\n        <div className=\"form-section\">\n          <h3>Desired Outcome</h3>\n          <p className=\"field-description\">What should readers achieve or learn from this lead magnet?</p>\n          \n          <div className=\"form-field\">\n            <label htmlFor=\"desired_outcome\">Outcome Description *</label>\n            <textarea\n              id=\"desired_outcome\"\n              value={data.desired_outcome || ''}\n              onChange={(e) => handleInputChange('desired_outcome', e.target.value)}\n              placeholder=\"After reading this lead magnet, my audience will be able to...\"\n              rows={4}\n              required\n            />\n            <div className=\"field-help\">\n              <strong>Examples:</strong>\n              <ul>\n                <li>\"Understand the true cost savings of sustainable building materials\"</li>\n                <li>\"Create a comprehensive brief for their residential renovation project\"</li>\n                <li>\"Evaluate architects based on their sustainability expertise\"</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Call-to-Action</h3>\n          <p className=\"field-description\">What do you want readers to do after consuming your lead magnet?</p>\n          \n          <div className=\"form-field\">\n            <label htmlFor=\"call_to_action\">Call-to-Action *</label>\n            <input\n              type=\"text\"\n              id=\"call_to_action\"\n              value={data.call_to_action || ''}\n              onChange={(e) => handleInputChange('call_to_action', e.target.value)}\n              placeholder=\"Schedule a Free Consultation\"\n              required\n            />\n            <div className=\"field-help\">\n              <strong>Popular options:</strong>\n              <div className=\"cta-suggestions\">\n                <button \n                  type=\"button\" \n                  className=\"suggestion-btn\"\n                  onClick={() => handleInputChange('call_to_action', 'Schedule a Free Consultation')}\n                >\n                  Schedule a Free Consultation\n                </button>\n                <button \n                  type=\"button\" \n                  className=\"suggestion-btn\"\n                  onClick={() => handleInputChange('call_to_action', 'Download Our Portfolio')}\n                >\n                  Download Our Portfolio\n                </button>\n                <button \n                  type=\"button\" \n                  className=\"suggestion-btn\"\n                  onClick={() => handleInputChange('call_to_action', 'Get a Project Quote')}\n                >\n                  Get a Project Quote\n                </button>\n                <button \n                  type=\"button\" \n                  className=\"suggestion-btn\"\n                  onClick={() => handleInputChange('call_to_action', 'Join Our Newsletter')}\n                >\n                  Join Our Newsletter\n                </button>\n                <button \n                  type=\"button\" \n                  className=\"suggestion-btn\"\n                  onClick={() => handleInputChange('call_to_action', 'Book a Site Visit')}\n                >\n                  Book a Site Visit\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Additional Requirements</h3>\n          \n          <div className=\"form-field\">\n            <label htmlFor=\"special_requests\">Special Requests or Additional Sections</label>\n            <textarea\n              id=\"special_requests\"\n              value={data.special_requests || ''}\n              onChange={(e) => handleInputChange('special_requests', e.target.value)}\n              placeholder=\"Any specific content, sections, or requirements for this lead magnet...\"\n              rows={4}\n            />\n            <div className=\"field-help\">\n              <strong>Examples:</strong>\n              <ul>\n                <li>\"Include a section on local building codes\"</li>\n                <li>\"Add client testimonials from similar projects\"</li>\n                <li>\"Include a cost comparison chart\"</li>\n                <li>\"Add photos from our recent sustainable projects\"</li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"form-field\">\n            <label htmlFor=\"preferred_layout_template\">Preferred Layout/Template (Optional)</label>\n            <select\n              id=\"preferred_layout_template\"\n              value={data.preferred_layout_template || ''}\n              onChange={(e) => handleInputChange('preferred_layout_template', e.target.value)}\n            >\n              <option value=\"\">Let AI choose the best layout</option>\n              <option value=\"professional\">Professional & Clean</option>\n              <option value=\"modern\">Modern & Visual</option>\n              <option value=\"minimal\">Minimal & Text-Focused</option>\n              <option value=\"creative\">Creative & Artistic</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Content Preview */}\n      <div className=\"content-preview\">\n        <h4>Content Preview</h4>\n        <div className=\"preview-card\">\n          <div className=\"preview-section\">\n            <strong>Goal:</strong> {data.desired_outcome || 'Not specified yet'}\n          </div>\n          <div className=\"preview-section\">\n            <strong>Call-to-Action:</strong> {data.call_to_action || 'Not specified yet'}\n          </div>\n          {data.special_requests && (\n            <div className=\"preview-section\">\n              <strong>Special Requirements:</strong> {data.special_requests}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentForm;","size_bytes":6492},"Frontend/src/components/forms/FirmProfileForm.tsx":{"content":"import React from 'react';\nimport type { FirmProfile } from '../../lib/leadMagnetApi';\nimport { FIRM_SIZE_CHOICES, INDUSTRY_SPECIALTY_CHOICES, FONT_STYLE_CHOICES } from '../../lib/leadMagnetApi';\nimport QuestionCard from './QuestionCard';\nimport './QuestionCard.css';\n\ninterface FirmProfileFormProps {\n  data: Partial<FirmProfile>;\n  onChange: (data: Partial<FirmProfile>) => void;\n  isExisting?: boolean;\n  onComplete?: () => void;\n}\n\nconst FirmProfileForm: React.FC<FirmProfileFormProps> = ({ data, onChange, onComplete }) => {\n  const handleInputChange = (field: keyof FirmProfile, value: any) => {\n    onChange({ [field]: value });\n  };\n\n  const handleIndustryChange = (industry: string, checked: boolean) => {\n    const currentIndustries = data.industry_specialty_list || [];\n    const updatedIndustries = checked\n      ? [...currentIndustries, industry]\n      : currentIndustries.filter(i => i !== industry);\n    \n    onChange({ \n      industry_specialty_list: updatedIndustries,\n      industry_specialty: updatedIndustries.join(',')\n    });\n  };\n\n  const handleFileUpload = (field: keyof FirmProfile, file: File | null) => {\n    if (file) {\n      onChange({ [field]: file });\n    }\n  };\n\n  const canComplete = () => {\n    return data.firm_name && \n           data.work_email && \n           data.firm_size && \n           data.location_country && \n           data.industry_specialty_list?.length && \n           data.primary_brand_color;\n  };\n\n  return (\n    <div className=\"firm-profile-form\">\n      <QuestionCard\n        title=\"Create Firm Profile\"\n        description=\"Tell us about your architecture firm to personalize your lead magnets\"\n        onNext={onComplete}\n        nextDisabled={!canComplete()}\n        showBack={false}\n        nextLabel=\"Complete Profile\"\n      >\n        {/* Basic Information */}\n        <div className=\"form-section\">\n          <h4>Basic Information</h4>\n          <div className=\"form-field\">\n            <label htmlFor=\"firm_name\">Firm Name *</label>\n            <input\n              type=\"text\"\n              id=\"firm_name\"\n              value={data.firm_name || ''}\n              onChange={(e) => handleInputChange('firm_name', e.target.value)}\n              placeholder=\"Your Architecture Firm\"\n              required\n            />\n          </div>\n\n          <div className=\"form-field\">\n            <label htmlFor=\"work_email\">Work Email *</label>\n            <input\n              type=\"email\"\n              id=\"work_email\"\n              value={data.work_email || ''}\n              onChange={(e) => handleInputChange('work_email', e.target.value)}\n              placeholder=\"contact@yourfirm.com\"\n              required\n            />\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-field\">\n              <label htmlFor=\"phone_number\">Phone Number</label>\n              <input\n                type=\"tel\"\n                id=\"phone_number\"\n                value={data.phone_number || ''}\n                onChange={(e) => handleInputChange('phone_number', e.target.value)}\n                placeholder=\"+1 (555) 123-4567\"\n              />\n            </div>\n\n            <div className=\"form-field\">\n              <label htmlFor=\"firm_website\">Firm Website</label>\n              <input\n                type=\"url\"\n                id=\"firm_website\"\n                value={data.firm_website || ''}\n                onChange={(e) => handleInputChange('firm_website', e.target.value)}\n                placeholder=\"https://yourfirm.com\"\n              />\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-field\">\n              <label htmlFor=\"firm_size\">Firm Size *</label>\n              <select\n                id=\"firm_size\"\n                value={data.firm_size || ''}\n                onChange={(e) => handleInputChange('firm_size', e.target.value)}\n                required\n              >\n                <option value=\"\">Select firm size</option>\n                {FIRM_SIZE_CHOICES.map(choice => (\n                  <option key={choice.value} value={choice.value}>\n                    {choice.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-field\">\n              <label htmlFor=\"location_country\">Location/Country *</label>\n              <input\n                type=\"text\"\n                id=\"location_country\"\n                value={data.location_country || ''}\n                onChange={(e) => handleInputChange('location_country', e.target.value)}\n                placeholder=\"United States\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Industry Specialties */}\n        <div className=\"form-section\">\n          <h4>Industry Specialties *</h4>\n          <div className=\"checkbox-grid\">\n            {INDUSTRY_SPECIALTY_CHOICES.map(choice => (\n              <label key={choice.value} className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={data.industry_specialty_list?.includes(choice.value) || false}\n                  onChange={(e) => handleIndustryChange(choice.value, e.target.checked)}\n                />\n                <span className=\"checkbox-text\">{choice.label}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Brand Identity */}\n        <div className=\"form-section\">\n          <h4>Brand Identity</h4>\n          <div className=\"form-field\">\n            <label htmlFor=\"logo\">Logo Upload</label>\n            <input\n              type=\"file\"\n              id=\"logo\"\n              accept=\".png,.jpg,.jpeg,.svg\"\n              onChange={(e) => handleFileUpload('logo', e.target.files?.[0] || null)}\n            />\n            <small>PNG, JPEG, or SVG format</small>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-field\">\n              <label htmlFor=\"primary_brand_color\">Primary Brand Color *</label>\n              <input\n                type=\"color\"\n                id=\"primary_brand_color\"\n                value={data.primary_brand_color || '#14b8a6'}\n                onChange={(e) => handleInputChange('primary_brand_color', e.target.value)}\n                required\n              />\n            </div>\n\n            <div className=\"form-field\">\n              <label htmlFor=\"secondary_brand_color\">Secondary Brand Color</label>\n              <input\n                type=\"color\"\n                id=\"secondary_brand_color\"\n                value={data.secondary_brand_color || '#0f172a'}\n                onChange={(e) => handleInputChange('secondary_brand_color', e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-field\">\n            <label htmlFor=\"preferred_font_style\">Preferred Font Style</label>\n            <select\n              id=\"preferred_font_style\"\n              value={data.preferred_font_style || 'no_preference'}\n              onChange={(e) => handleInputChange('preferred_font_style', e.target.value)}\n            >\n              {FONT_STYLE_CHOICES.map(choice => (\n                <option key={choice.value} value={choice.value}>\n                  {choice.label}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-field\">\n            <label htmlFor=\"additional_branding_guidelines\">Additional Branding Guidelines</label>\n            <textarea\n              id=\"additional_branding_guidelines\"\n              value={data.additional_branding_guidelines || ''}\n              onChange={(e) => handleInputChange('additional_branding_guidelines', e.target.value)}\n              placeholder=\"Any specific brand guidelines, style preferences, or requirements...\"\n              rows={4}\n            />\n          </div>\n        </div>\n      </QuestionCard>\n    </div>\n  );\n};\n\nexport default FirmProfileForm;","size_bytes":7960},"Frontend/src/components/forms/LeadMagnetBasicsForm.tsx":{"content":"import React from 'react';\nimport type { LeadMagnetGeneration } from '../../lib/leadMagnetApi';\nimport { LEAD_MAGNET_TYPE_CHOICES, MAIN_TOPIC_CHOICES } from '../../lib/leadMagnetApi';\n\ninterface LeadMagnetBasicsFormProps {\n  data: Partial<LeadMagnetGeneration>;\n  onChange: (data: Partial<LeadMagnetGeneration>) => void;\n}\n\nconst LeadMagnetBasicsForm: React.FC<LeadMagnetBasicsFormProps> = ({ data, onChange }) => {\n  const handleInputChange = (field: keyof LeadMagnetGeneration, value: any) => {\n    onChange({ [field]: value });\n  };\n\n  return (\n    <div className=\"lead-magnet-basics-form\">\n      <h2>Lead Magnet Basics</h2>\n      <p className=\"form-description\">\n        Choose the type and topic for your lead magnet to attract your ideal clients.\n      </p>\n\n      <div className=\"form-grid\">\n        <div className=\"form-section\">\n          <h3>Lead Magnet Type</h3>\n          <p className=\"field-description\">What format works best for your content?</p>\n          \n          <div className=\"radio-grid\">\n            {LEAD_MAGNET_TYPE_CHOICES.map(choice => (\n              <label key={choice.value} className=\"radio-card\">\n                <input\n                  type=\"radio\"\n                  name=\"lead_magnet_type\"\n                  value={choice.value}\n                  checked={data.lead_magnet_type === choice.value}\n                  onChange={(e) => handleInputChange('lead_magnet_type', e.target.value)}\n                />\n                <div className=\"radio-content\">\n                  <span className=\"radio-title\">{choice.label}</span>\n                  <span className=\"radio-description\">\n                    {getTypeDescription(choice.value)}\n                  </span>\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"form-section\">\n          <h3>Main Topic</h3>\n          <p className=\"field-description\">What's the primary focus of this lead magnet?</p>\n          \n          <div className=\"radio-grid\">\n            {MAIN_TOPIC_CHOICES.map(choice => (\n              <label key={choice.value} className=\"radio-card\">\n                <input\n                  type=\"radio\"\n                  name=\"main_topic\"\n                  value={choice.value}\n                  checked={data.main_topic === choice.value}\n                  onChange={(e) => handleInputChange('main_topic', e.target.value)}\n                />\n                <div className=\"radio-content\">\n                  <span className=\"radio-title\">{choice.label}</span>\n                  <span className=\"radio-description\">\n                    {getTopicDescription(choice.value)}\n                  </span>\n                </div>\n              </label>\n            ))}\n          </div>\n\n          {data.main_topic === 'custom' && (\n            <div className=\"form-field\">\n              <label htmlFor=\"custom_topic\">Custom Topic</label>\n              <input\n                type=\"text\"\n                id=\"custom_topic\"\n                value={data.custom_topic || ''}\n                onChange={(e) => handleInputChange('custom_topic', e.target.value)}\n                placeholder=\"Describe your custom topic...\"\n                required\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst getTypeDescription = (type: string): string => {\n  const descriptions: Record<string, string> = {\n    'guide': 'Comprehensive how-to resource',\n    'case_study': 'Real project showcase with results',\n    'checklist': 'Step-by-step actionable list',\n    'roi_calculator': 'Interactive value demonstration tool',\n    'trends_report': 'Industry insights and predictions',\n    'client_onboarding_flow': 'Process overview for new clients',\n    'design_portfolio': 'Curated project showcase',\n    'custom': 'Something unique to your practice',\n  };\n  return descriptions[type] || '';\n};\n\nconst getTopicDescription = (topic: string): string => {\n  const descriptions: Record<string, string> = {\n    'sustainable_architecture': 'Green building and eco-friendly design',\n    'smart_homes': 'Technology-integrated residential design',\n    'adaptive_reuse': 'Repurposing existing structures',\n    'wellness_biophilic': 'Health-focused and nature-integrated design',\n    'modular_prefab': 'Efficient, factory-built construction',\n    'urban_placemaking': 'Community-focused public spaces',\n    'passive_house_net_zero': 'Ultra-efficient energy design',\n    'climate_resilient': 'Future-proof, weather-resistant design',\n    'project_roi': 'Investment returns and value creation',\n    'branding_differentiation': 'Standing out in the market',\n    'custom': 'Your unique area of expertise',\n  };\n  return descriptions[topic] || '';\n};\n\nexport default LeadMagnetBasicsForm;","size_bytes":4754},"Frontend/src/components/forms/QuestionCard.css":{"content":"/* Question Card Styles - Metallic Grey */\n.question-card {\n  background: linear-gradient(135deg, #c0c0c0 0%, #a8a8a8 100%);\n  border-radius: 1rem;\n  padding: 2.5rem;\n  border: 1px solid #999999;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.1);\n  position: relative;\n  max-width: 700px;\n  margin: 0 auto;\n}\n\n.question-header {\n  text-align: left;\n  margin-bottom: 2rem;\n}\n\n.question-title {\n  color: #000000;\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n}\n\n.question-description {\n  color: #6b7280;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.question-content {\n  margin-bottom: 2rem;\n}\n\n.question-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  padding-top: 1.5rem;\n}\n\n.question-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 500;\n  font-size: 0.875rem;\n  text-decoration: none;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  border: none;\n  min-width: 100px;\n  justify-content: center;\n}\n\n.question-btn.primary {\n  background: #14b8a6;\n  color: white;\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n.question-btn.primary:hover:not(:disabled) {\n  background: #0d9488;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n.question-btn.secondary {\n  background: #f9fafb;\n  color: #374151;\n  border: 1px solid #d1d5db;\n}\n\n.question-btn.secondary:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n\n.question-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Form Sections */\n.question-card .form-section {\n  margin-bottom: 2.5rem;\n}\n\n.question-card .form-section h4 {\n  color: #000000;\n  font-size: 1.125rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  border-bottom: 2px solid #999999;\n  padding-bottom: 0.5rem;\n}\n\n/* Form Fields in Question Cards */\n.question-card .form-field {\n  margin-bottom: 1.5rem;\n}\n\n.question-card .form-field label {\n  display: block;\n  color: #000000;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.question-card .form-field input,\n.question-card .form-field select,\n.question-card .form-field textarea {\n  width: 100%;\n  padding: 0.75rem;\n  background: #ffffff;\n  border: 1px solid #d1d5db;\n  border-radius: 0.5rem;\n  color: #111827;\n  font-size: 0.875rem;\n  transition: border-color 0.2s ease, box-shadow 0.2s ease;\n}\n\n.question-card .form-field input:focus,\n.question-card .form-field select:focus,\n.question-card .form-field textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.question-card .form-field input::placeholder,\n.question-card .form-field textarea::placeholder {\n  color: #9ca3af;\n}\n\n.question-card .form-field small {\n  display: block;\n  color: #6b7280;\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n}\n\n/* Form Row in Question Cards */\n.question-card .form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1.5rem;\n}\n\n/* Checkbox and Radio Grids in Question Cards */\n.question-card .checkbox-grid,\n.question-card .radio-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 1rem;\n}\n\n.question-card .checkbox-card,\n.question-card .radio-card {\n  display: block;\n  background: rgba(15, 23, 42, 0.8);\n  border: 2px solid rgba(20, 184, 166, 0.3);\n  border-radius: 0.75rem;\n  padding: 1.25rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.question-card .checkbox-card:hover,\n.question-card .radio-card:hover {\n  border-color: #14b8a6;\n  background: rgba(15, 23, 42, 1);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(20, 184, 166, 0.2);\n}\n\n.question-card .checkbox-card input:checked + .checkbox-content,\n.question-card .radio-card input:checked + .radio-content {\n  color: #14b8a6;\n}\n\n.question-card .checkbox-card input:checked,\n.question-card .radio-card input:checked {\n  accent-color: #14b8a6;\n}\n\n.question-card .checkbox-card input,\n.question-card .radio-card input {\n  margin-bottom: 0.75rem;\n}\n\n.question-card .checkbox-title,\n.question-card .radio-title {\n  display: block;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: #e2e8f0;\n  font-size: 1rem;\n}\n\n.question-card .checkbox-description,\n.question-card .radio-description {\n  display: block;\n  font-size: 0.875rem;\n  color: #94a3b8;\n  line-height: 1.4;\n}\n\n/* Checkbox Labels in Question Cards */\n.question-card .checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 0.75rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid #e5e7eb;\n  margin-bottom: 0.5rem;\n}\n\n.question-card .checkbox-label:hover {\n  background: #f9fafb;\n  border-color: #d1d5db;\n}\n\n.question-card .checkbox-text {\n  font-size: 0.875rem;\n  color: #000000;\n  font-weight: 400;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .question-card {\n    padding: 2rem;\n    margin: 0 1rem;\n  }\n\n  .question-title {\n    font-size: 1.5rem;\n  }\n\n  .question-description {\n    font-size: 1rem;\n  }\n\n  .question-actions {\n    flex-direction: column;\n  }\n\n  .question-card .form-row {\n    grid-template-columns: 1fr;\n  }\n\n  .question-card .checkbox-grid,\n  .question-card .radio-grid {\n    grid-template-columns: 1fr;\n  }\n}","size_bytes":5286},"Frontend/src/components/forms/QuestionCard.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface QuestionCardProps {\n  title: string;\n  description?: string;\n  children: React.ReactNode;\n  onNext?: () => void;\n  onBack?: () => void;\n  nextDisabled?: boolean;\n  isLastCard?: boolean;\n  showBack?: boolean;\n  nextLabel?: string;\n}\n\nconst QuestionCard: React.FC<QuestionCardProps> = ({\n  title,\n  description,\n  children,\n  onNext,\n  onBack,\n  nextDisabled = false,\n  isLastCard = false,\n  showBack = true,\n  nextLabel\n}) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      transition={{ duration: 0.4 }}\n      className=\"question-card\"\n    >\n      <div className=\"question-header\">\n        <h3 className=\"question-title\">{title}</h3>\n        {description && (\n          <p className=\"question-description\">{description}</p>\n        )}\n      </div>\n\n      <div className=\"question-content\">\n        {children}\n      </div>\n\n      <div className=\"question-actions\">\n        {showBack && onBack && (\n          <button\n            type=\"button\"\n            onClick={onBack}\n            className=\"question-btn secondary\"\n          >\n            Back\n          </button>\n        )}\n        \n        {onNext && (\n          <button\n            type=\"button\"\n            onClick={onNext}\n            disabled={nextDisabled}\n            className=\"question-btn primary\"\n          >\n            {nextLabel || (isLastCard ? 'Complete' : 'Next')}\n          </button>\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default QuestionCard;","size_bytes":1610}},"version":1}